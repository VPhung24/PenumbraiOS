// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: penumbra/core/ibc/v1alpha1/ibc.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Penumbra_Core_Ibc_V1alpha1_IBCAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: Penumbra_Core_Ibc_V1alpha1_IBCAction.OneOf_Action? = nil

  var connectionOpenInit: Ibc_Core_Connection_V1_MsgConnectionOpenInit {
    get {
      if case .connectionOpenInit(let v)? = action {return v}
      return Ibc_Core_Connection_V1_MsgConnectionOpenInit()
    }
    set {action = .connectionOpenInit(newValue)}
  }

  var connectionOpenTry: Ibc_Core_Connection_V1_MsgConnectionOpenTry {
    get {
      if case .connectionOpenTry(let v)? = action {return v}
      return Ibc_Core_Connection_V1_MsgConnectionOpenTry()
    }
    set {action = .connectionOpenTry(newValue)}
  }

  var connectionOpenAck: Ibc_Core_Connection_V1_MsgConnectionOpenAck {
    get {
      if case .connectionOpenAck(let v)? = action {return v}
      return Ibc_Core_Connection_V1_MsgConnectionOpenAck()
    }
    set {action = .connectionOpenAck(newValue)}
  }

  var connectionOpenConfirm: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm {
    get {
      if case .connectionOpenConfirm(let v)? = action {return v}
      return Ibc_Core_Connection_V1_MsgConnectionOpenConfirm()
    }
    set {action = .connectionOpenConfirm(newValue)}
  }

  var channelOpenInit: Ibc_Core_Channel_V1_MsgChannelOpenInit {
    get {
      if case .channelOpenInit(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelOpenInit()
    }
    set {action = .channelOpenInit(newValue)}
  }

  var channelOpenTry: Ibc_Core_Channel_V1_MsgChannelOpenTry {
    get {
      if case .channelOpenTry(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelOpenTry()
    }
    set {action = .channelOpenTry(newValue)}
  }

  var channelOpenAck: Ibc_Core_Channel_V1_MsgChannelOpenAck {
    get {
      if case .channelOpenAck(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelOpenAck()
    }
    set {action = .channelOpenAck(newValue)}
  }

  var channelOpenConfirm: Ibc_Core_Channel_V1_MsgChannelOpenConfirm {
    get {
      if case .channelOpenConfirm(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelOpenConfirm()
    }
    set {action = .channelOpenConfirm(newValue)}
  }

  var channelCloseInit: Ibc_Core_Channel_V1_MsgChannelCloseInit {
    get {
      if case .channelCloseInit(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelCloseInit()
    }
    set {action = .channelCloseInit(newValue)}
  }

  var channelCloseConfirm: Ibc_Core_Channel_V1_MsgChannelCloseConfirm {
    get {
      if case .channelCloseConfirm(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgChannelCloseConfirm()
    }
    set {action = .channelCloseConfirm(newValue)}
  }

  var recvPacket: Ibc_Core_Channel_V1_MsgRecvPacket {
    get {
      if case .recvPacket(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgRecvPacket()
    }
    set {action = .recvPacket(newValue)}
  }

  var timeout: Ibc_Core_Channel_V1_MsgTimeout {
    get {
      if case .timeout(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgTimeout()
    }
    set {action = .timeout(newValue)}
  }

  var acknowledgement: Ibc_Core_Channel_V1_MsgAcknowledgement {
    get {
      if case .acknowledgement(let v)? = action {return v}
      return Ibc_Core_Channel_V1_MsgAcknowledgement()
    }
    set {action = .acknowledgement(newValue)}
  }

  var createClient: Ibc_Core_Client_V1_MsgCreateClient {
    get {
      if case .createClient(let v)? = action {return v}
      return Ibc_Core_Client_V1_MsgCreateClient()
    }
    set {action = .createClient(newValue)}
  }

  var updateClient: Ibc_Core_Client_V1_MsgUpdateClient {
    get {
      if case .updateClient(let v)? = action {return v}
      return Ibc_Core_Client_V1_MsgUpdateClient()
    }
    set {action = .updateClient(newValue)}
  }

  var upgradeClient: Ibc_Core_Client_V1_MsgUpgradeClient {
    get {
      if case .upgradeClient(let v)? = action {return v}
      return Ibc_Core_Client_V1_MsgUpgradeClient()
    }
    set {action = .upgradeClient(newValue)}
  }

  var submitMisbehaviour: Ibc_Core_Client_V1_MsgSubmitMisbehaviour {
    get {
      if case .submitMisbehaviour(let v)? = action {return v}
      return Ibc_Core_Client_V1_MsgSubmitMisbehaviour()
    }
    set {action = .submitMisbehaviour(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Action: Equatable {
    case connectionOpenInit(Ibc_Core_Connection_V1_MsgConnectionOpenInit)
    case connectionOpenTry(Ibc_Core_Connection_V1_MsgConnectionOpenTry)
    case connectionOpenAck(Ibc_Core_Connection_V1_MsgConnectionOpenAck)
    case connectionOpenConfirm(Ibc_Core_Connection_V1_MsgConnectionOpenConfirm)
    case channelOpenInit(Ibc_Core_Channel_V1_MsgChannelOpenInit)
    case channelOpenTry(Ibc_Core_Channel_V1_MsgChannelOpenTry)
    case channelOpenAck(Ibc_Core_Channel_V1_MsgChannelOpenAck)
    case channelOpenConfirm(Ibc_Core_Channel_V1_MsgChannelOpenConfirm)
    case channelCloseInit(Ibc_Core_Channel_V1_MsgChannelCloseInit)
    case channelCloseConfirm(Ibc_Core_Channel_V1_MsgChannelCloseConfirm)
    case recvPacket(Ibc_Core_Channel_V1_MsgRecvPacket)
    case timeout(Ibc_Core_Channel_V1_MsgTimeout)
    case acknowledgement(Ibc_Core_Channel_V1_MsgAcknowledgement)
    case createClient(Ibc_Core_Client_V1_MsgCreateClient)
    case updateClient(Ibc_Core_Client_V1_MsgUpdateClient)
    case upgradeClient(Ibc_Core_Client_V1_MsgUpgradeClient)
    case submitMisbehaviour(Ibc_Core_Client_V1_MsgSubmitMisbehaviour)

  #if !swift(>=4.1)
    static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_IBCAction.OneOf_Action, rhs: Penumbra_Core_Ibc_V1alpha1_IBCAction.OneOf_Action) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.connectionOpenInit, .connectionOpenInit): return {
        guard case .connectionOpenInit(let l) = lhs, case .connectionOpenInit(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionOpenTry, .connectionOpenTry): return {
        guard case .connectionOpenTry(let l) = lhs, case .connectionOpenTry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionOpenAck, .connectionOpenAck): return {
        guard case .connectionOpenAck(let l) = lhs, case .connectionOpenAck(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.connectionOpenConfirm, .connectionOpenConfirm): return {
        guard case .connectionOpenConfirm(let l) = lhs, case .connectionOpenConfirm(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelOpenInit, .channelOpenInit): return {
        guard case .channelOpenInit(let l) = lhs, case .channelOpenInit(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelOpenTry, .channelOpenTry): return {
        guard case .channelOpenTry(let l) = lhs, case .channelOpenTry(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelOpenAck, .channelOpenAck): return {
        guard case .channelOpenAck(let l) = lhs, case .channelOpenAck(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelOpenConfirm, .channelOpenConfirm): return {
        guard case .channelOpenConfirm(let l) = lhs, case .channelOpenConfirm(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelCloseInit, .channelCloseInit): return {
        guard case .channelCloseInit(let l) = lhs, case .channelCloseInit(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.channelCloseConfirm, .channelCloseConfirm): return {
        guard case .channelCloseConfirm(let l) = lhs, case .channelCloseConfirm(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.recvPacket, .recvPacket): return {
        guard case .recvPacket(let l) = lhs, case .recvPacket(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.timeout, .timeout): return {
        guard case .timeout(let l) = lhs, case .timeout(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.acknowledgement, .acknowledgement): return {
        guard case .acknowledgement(let l) = lhs, case .acknowledgement(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.createClient, .createClient): return {
        guard case .createClient(let l) = lhs, case .createClient(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.updateClient, .updateClient): return {
        guard case .updateClient(let l) = lhs, case .updateClient(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.upgradeClient, .upgradeClient): return {
        guard case .upgradeClient(let l) = lhs, case .upgradeClient(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.submitMisbehaviour, .submitMisbehaviour): return {
        guard case .submitMisbehaviour(let l) = lhs, case .submitMisbehaviour(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// FungibleTokenPacketData defines a struct for the packet payload
/// See FungibleTokenPacketData spec:
/// https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
struct Penumbra_Core_Ibc_V1alpha1_FungibleTokenPacketData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the token denomination to be transferred
  var denom: String = String()

  /// the token amount to be transferred
  var amount: String = String()

  /// the sender address
  var sender: String = String()

  /// the recipient address on the destination chain
  var receiver: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Penumbra_Core_Ibc_V1alpha1_ICS20Withdrawal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the chain ID of the destination chain for this ICS20 transfer
  var destinationChainID: String = String()

  /// a transparent value consisting of an amount and an asset ID.
  var value: Penumbra_Core_Crypto_V1alpha1_Value {
    get {return _value ?? Penumbra_Core_Crypto_V1alpha1_Value()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  /// the address on the destination chain to send the transfer to 
  var destinationChainAddress: String = String()

  /// a "sender" penumbra address to use to return funds from this withdrawal.
  /// this should be an ephemeral address
  var returnAddress: Penumbra_Core_Crypto_V1alpha1_Address {
    get {return _returnAddress ?? Penumbra_Core_Crypto_V1alpha1_Address()}
    set {_returnAddress = newValue}
  }
  /// Returns true if `returnAddress` has been explicitly set.
  var hasReturnAddress: Bool {return self._returnAddress != nil}
  /// Clears the value of `returnAddress`. Subsequent reads from it will return its default value.
  mutating func clearReturnAddress() {self._returnAddress = nil}

  /// the height (on Penumbra) at which this transfer expires (and funds are sent
  /// back to the sender address?). NOTE: if funds are sent back to the sender,
  /// we MUST verify a nonexistence proof before accepting the timeout, to
  /// prevent relayer censorship attacks. The core IBC implementation does this
  /// in its handling of validation of timeouts.
  var timeoutHeight: UInt64 = 0

  /// the timestamp at which this transfer expires.
  var timeoutTime: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _value: Penumbra_Core_Crypto_V1alpha1_Value? = nil
  fileprivate var _returnAddress: Penumbra_Core_Crypto_V1alpha1_Address? = nil
}

struct Penumbra_Core_Ibc_V1alpha1_ClientData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  /// NOTE: left as Any to allow us to add more client types later
  var clientState: SwiftProtobuf.Google_Protobuf_Any {
    get {return _clientState ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_clientState = newValue}
  }
  /// Returns true if `clientState` has been explicitly set.
  var hasClientState: Bool {return self._clientState != nil}
  /// Clears the value of `clientState`. Subsequent reads from it will return its default value.
  mutating func clearClientState() {self._clientState = nil}

  var processedTime: String = String()

  var processedHeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientState: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct Penumbra_Core_Ibc_V1alpha1_ClientCounter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var counter: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Penumbra_Core_Ibc_V1alpha1_ConsensusState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consensusState: SwiftProtobuf.Google_Protobuf_Any {
    get {return _consensusState ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_consensusState = newValue}
  }
  /// Returns true if `consensusState` has been explicitly set.
  var hasConsensusState: Bool {return self._consensusState != nil}
  /// Clears the value of `consensusState`. Subsequent reads from it will return its default value.
  mutating func clearConsensusState() {self._consensusState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _consensusState: SwiftProtobuf.Google_Protobuf_Any? = nil
}

struct Penumbra_Core_Ibc_V1alpha1_VerifiedHeights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var heights: [Ibc_Core_Client_V1_Height] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Penumbra_Core_Ibc_V1alpha1_ConnectionCounter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var counter: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Penumbra_Core_Ibc_V1alpha1_ClientConnections {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connections: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Penumbra_Core_Ibc_V1alpha1_IBCAction: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_IBCAction.OneOf_Action: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_FungibleTokenPacketData: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ICS20Withdrawal: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ClientData: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ClientCounter: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ConsensusState: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_VerifiedHeights: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ConnectionCounter: @unchecked Sendable {}
extension Penumbra_Core_Ibc_V1alpha1_ClientConnections: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "penumbra.core.ibc.v1alpha1"

extension Penumbra_Core_Ibc_V1alpha1_IBCAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IBCAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "connectionOpenInit"),
    2: .same(proto: "connectionOpenTry"),
    3: .same(proto: "connectionOpenAck"),
    4: .same(proto: "connectionOpenConfirm"),
    5: .same(proto: "channelOpenInit"),
    6: .same(proto: "channelOpenTry"),
    7: .same(proto: "channelOpenAck"),
    8: .same(proto: "channelOpenConfirm"),
    9: .same(proto: "channelCloseInit"),
    10: .same(proto: "channelCloseConfirm"),
    11: .same(proto: "recvPacket"),
    12: .same(proto: "timeout"),
    13: .same(proto: "acknowledgement"),
    14: .same(proto: "createClient"),
    15: .same(proto: "updateClient"),
    16: .same(proto: "upgradeClient"),
    17: .same(proto: "submitMisbehaviour"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Ibc_Core_Connection_V1_MsgConnectionOpenInit?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .connectionOpenInit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .connectionOpenInit(v)
        }
      }()
      case 2: try {
        var v: Ibc_Core_Connection_V1_MsgConnectionOpenTry?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .connectionOpenTry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .connectionOpenTry(v)
        }
      }()
      case 3: try {
        var v: Ibc_Core_Connection_V1_MsgConnectionOpenAck?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .connectionOpenAck(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .connectionOpenAck(v)
        }
      }()
      case 4: try {
        var v: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .connectionOpenConfirm(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .connectionOpenConfirm(v)
        }
      }()
      case 5: try {
        var v: Ibc_Core_Channel_V1_MsgChannelOpenInit?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelOpenInit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelOpenInit(v)
        }
      }()
      case 6: try {
        var v: Ibc_Core_Channel_V1_MsgChannelOpenTry?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelOpenTry(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelOpenTry(v)
        }
      }()
      case 7: try {
        var v: Ibc_Core_Channel_V1_MsgChannelOpenAck?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelOpenAck(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelOpenAck(v)
        }
      }()
      case 8: try {
        var v: Ibc_Core_Channel_V1_MsgChannelOpenConfirm?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelOpenConfirm(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelOpenConfirm(v)
        }
      }()
      case 9: try {
        var v: Ibc_Core_Channel_V1_MsgChannelCloseInit?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelCloseInit(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelCloseInit(v)
        }
      }()
      case 10: try {
        var v: Ibc_Core_Channel_V1_MsgChannelCloseConfirm?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .channelCloseConfirm(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .channelCloseConfirm(v)
        }
      }()
      case 11: try {
        var v: Ibc_Core_Channel_V1_MsgRecvPacket?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .recvPacket(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .recvPacket(v)
        }
      }()
      case 12: try {
        var v: Ibc_Core_Channel_V1_MsgTimeout?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .timeout(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .timeout(v)
        }
      }()
      case 13: try {
        var v: Ibc_Core_Channel_V1_MsgAcknowledgement?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .acknowledgement(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .acknowledgement(v)
        }
      }()
      case 14: try {
        var v: Ibc_Core_Client_V1_MsgCreateClient?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .createClient(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .createClient(v)
        }
      }()
      case 15: try {
        var v: Ibc_Core_Client_V1_MsgUpdateClient?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .updateClient(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .updateClient(v)
        }
      }()
      case 16: try {
        var v: Ibc_Core_Client_V1_MsgUpgradeClient?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .upgradeClient(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .upgradeClient(v)
        }
      }()
      case 17: try {
        var v: Ibc_Core_Client_V1_MsgSubmitMisbehaviour?
        var hadOneofValue = false
        if let current = self.action {
          hadOneofValue = true
          if case .submitMisbehaviour(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.action = .submitMisbehaviour(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.action {
    case .connectionOpenInit?: try {
      guard case .connectionOpenInit(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .connectionOpenTry?: try {
      guard case .connectionOpenTry(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .connectionOpenAck?: try {
      guard case .connectionOpenAck(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .connectionOpenConfirm?: try {
      guard case .connectionOpenConfirm(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .channelOpenInit?: try {
      guard case .channelOpenInit(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .channelOpenTry?: try {
      guard case .channelOpenTry(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .channelOpenAck?: try {
      guard case .channelOpenAck(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .channelOpenConfirm?: try {
      guard case .channelOpenConfirm(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .channelCloseInit?: try {
      guard case .channelCloseInit(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .channelCloseConfirm?: try {
      guard case .channelCloseConfirm(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .recvPacket?: try {
      guard case .recvPacket(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .timeout?: try {
      guard case .timeout(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .acknowledgement?: try {
      guard case .acknowledgement(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .createClient?: try {
      guard case .createClient(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .updateClient?: try {
      guard case .updateClient(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .upgradeClient?: try {
      guard case .upgradeClient(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .submitMisbehaviour?: try {
      guard case .submitMisbehaviour(let v)? = self.action else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_IBCAction, rhs: Penumbra_Core_Ibc_V1alpha1_IBCAction) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_FungibleTokenPacketData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FungibleTokenPacketData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
    3: .same(proto: "sender"),
    4: .same(proto: "receiver"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_FungibleTokenPacketData, rhs: Penumbra_Core_Ibc_V1alpha1_FungibleTokenPacketData) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ICS20Withdrawal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ICS20Withdrawal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "destination_chain_id"),
    2: .same(proto: "value"),
    3: .standard(proto: "destination_chain_address"),
    5: .standard(proto: "return_address"),
    6: .standard(proto: "timeout_height"),
    7: .standard(proto: "timeout_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.destinationChainID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destinationChainAddress) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._returnAddress) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.timeoutHeight) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.timeoutTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.destinationChainID.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationChainID, fieldNumber: 1)
    }
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.destinationChainAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationChainAddress, fieldNumber: 3)
    }
    try { if let v = self._returnAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.timeoutHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutHeight, fieldNumber: 6)
    }
    if self.timeoutTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutTime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ICS20Withdrawal, rhs: Penumbra_Core_Ibc_V1alpha1_ICS20Withdrawal) -> Bool {
    if lhs.destinationChainID != rhs.destinationChainID {return false}
    if lhs._value != rhs._value {return false}
    if lhs.destinationChainAddress != rhs.destinationChainAddress {return false}
    if lhs._returnAddress != rhs._returnAddress {return false}
    if lhs.timeoutHeight != rhs.timeoutHeight {return false}
    if lhs.timeoutTime != rhs.timeoutTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ClientData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clientID"),
    2: .same(proto: "clientState"),
    3: .same(proto: "processedTime"),
    4: .same(proto: "processedHeight"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clientState) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.processedTime) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.processedHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    try { if let v = self._clientState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.processedTime.isEmpty {
      try visitor.visitSingularStringField(value: self.processedTime, fieldNumber: 3)
    }
    if self.processedHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.processedHeight, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ClientData, rhs: Penumbra_Core_Ibc_V1alpha1_ClientData) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs._clientState != rhs._clientState {return false}
    if lhs.processedTime != rhs.processedTime {return false}
    if lhs.processedHeight != rhs.processedHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ClientCounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientCounter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counter"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.counter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.counter != 0 {
      try visitor.visitSingularUInt64Field(value: self.counter, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ClientCounter, rhs: Penumbra_Core_Ibc_V1alpha1_ClientCounter) -> Bool {
    if lhs.counter != rhs.counter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ConsensusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "consensusState"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._consensusState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._consensusState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ConsensusState, rhs: Penumbra_Core_Ibc_V1alpha1_ConsensusState) -> Bool {
    if lhs._consensusState != rhs._consensusState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_VerifiedHeights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifiedHeights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "heights"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.heights) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.heights.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.heights, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_VerifiedHeights, rhs: Penumbra_Core_Ibc_V1alpha1_VerifiedHeights) -> Bool {
    if lhs.heights != rhs.heights {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ConnectionCounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionCounter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counter"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.counter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.counter != 0 {
      try visitor.visitSingularUInt64Field(value: self.counter, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ConnectionCounter, rhs: Penumbra_Core_Ibc_V1alpha1_ConnectionCounter) -> Bool {
    if lhs.counter != rhs.counter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Penumbra_Core_Ibc_V1alpha1_ClientConnections: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientConnections"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "connections"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.connections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connections.isEmpty {
      try visitor.visitRepeatedStringField(value: self.connections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Penumbra_Core_Ibc_V1alpha1_ClientConnections, rhs: Penumbra_Core_Ibc_V1alpha1_ClientConnections) -> Bool {
    if lhs.connections != rhs.connections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
