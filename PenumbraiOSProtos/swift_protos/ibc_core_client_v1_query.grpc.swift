//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/client/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Ibc_Core_Client_V1_QueryClient`, then call methods of this protocol to make API calls.
public protocol Ibc_Core_Client_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? { get }

  func clientState(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>

  func clientStates(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>

  func consensusState(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>

  func consensusStates(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>

  func clientStatus(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>

  func clientParams(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>

  func upgradedClientState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>

  func upgradedConsensusState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>
}

extension Ibc_Core_Client_V1_QueryClientProtocol {
  public var serviceName: String {
    return "ibc.core.client.v1.Query"
  }

  /// ClientState queries an IBC light client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clientState(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStateInterceptors() ?? []
    )
  }

  /// ClientStates queries all the IBC light clients of a chain.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clientStates(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatesInterceptors() ?? []
    )
  }

  /// ConsensusState queries a consensus state associated with a client state at
  /// a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsensusState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func consensusState(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? []
    )
  }

  /// ConsensusStates queries all the consensus state associated with a given
  /// client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsensusStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func consensusStates(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? []
    )
  }

  /// Status queries the status of an IBC client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clientStatus(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatusInterceptors() ?? []
    )
  }

  /// ClientParams queries all parameters of the ibc client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func clientParams(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientParamsInterceptors() ?? []
    )
  }

  /// UpgradedClientState queries an Upgraded IBC light client.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradedClientState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upgradedClientState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedClientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? []
    )
  }

  /// UpgradedConsensusState queries an Upgraded IBC consensus state.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradedConsensusState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upgradedConsensusState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ibc_Core_Client_V1_QueryClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ibc_Core_Client_V1_QueryNIOClient")
public final class Ibc_Core_Client_V1_QueryClient: Ibc_Core_Client_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.client.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ibc_Core_Client_V1_QueryNIOClient: Ibc_Core_Client_V1_QueryClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.client.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Query provides defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Client_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeClientStateCall(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>

  func makeClientStatesCall(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>

  func makeConsensusStateCall(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>

  func makeConsensusStatesCall(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>

  func makeClientStatusCall(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>

  func makeClientParamsCall(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>

  func makeUpgradedClientStateCall(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>

  func makeUpgradedConsensusStateCall(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V1_QueryAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V1_QueryClientMetadata.serviceDescriptor
  }

  public var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeClientStateCall(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStateInterceptors() ?? []
    )
  }

  public func makeClientStatesCall(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatesInterceptors() ?? []
    )
  }

  public func makeConsensusStateCall(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? []
    )
  }

  public func makeConsensusStatesCall(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? []
    )
  }

  public func makeClientStatusCall(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatusInterceptors() ?? []
    )
  }

  public func makeClientParamsCall(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientParamsInterceptors() ?? []
    )
  }

  public func makeUpgradedClientStateCall(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedClientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? []
    )
  }

  public func makeUpgradedConsensusStateCall(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V1_QueryAsyncClientProtocol {
  public func clientState(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryClientStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStateInterceptors() ?? []
    )
  }

  public func clientStates(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryClientStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatesInterceptors() ?? []
    )
  }

  public func consensusState(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryConsensusStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? []
    )
  }

  public func consensusStates(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryConsensusStatesResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusStates.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? []
    )
  }

  public func clientStatus(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryClientStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatusInterceptors() ?? []
    )
  }

  public func clientParams(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryClientParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientParamsInterceptors() ?? []
    )
  }

  public func upgradedClientState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryUpgradedClientStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedClientState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? []
    )
  }

  public func upgradedConsensusState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedConsensusState.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ibc_Core_Client_V1_QueryAsyncClient: Ibc_Core_Client_V1_QueryAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'clientState'.
  func makeClientStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>]

  /// - Returns: Interceptors to use when invoking 'clientStates'.
  func makeClientStatesInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'consensusState'.
  func makeConsensusStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>]

  /// - Returns: Interceptors to use when invoking 'consensusStates'.
  func makeConsensusStatesInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'clientStatus'.
  func makeClientStatusInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'clientParams'.
  func makeClientParamsInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'upgradedClientState'.
  func makeUpgradedClientStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>]

  /// - Returns: Interceptors to use when invoking 'upgradedConsensusState'.
  func makeUpgradedConsensusStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>]
}

public enum Ibc_Core_Client_V1_QueryClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.client.v1.Query",
    methods: [
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientState,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStates,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusState,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.consensusStates,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientStatus,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.clientParams,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedClientState,
      Ibc_Core_Client_V1_QueryClientMetadata.Methods.upgradedConsensusState,
    ]
  )

  public enum Methods {
    public static let clientState = GRPCMethodDescriptor(
      name: "ClientState",
      path: "/ibc.core.client.v1.Query/ClientState",
      type: GRPCCallType.unary
    )

    public static let clientStates = GRPCMethodDescriptor(
      name: "ClientStates",
      path: "/ibc.core.client.v1.Query/ClientStates",
      type: GRPCCallType.unary
    )

    public static let consensusState = GRPCMethodDescriptor(
      name: "ConsensusState",
      path: "/ibc.core.client.v1.Query/ConsensusState",
      type: GRPCCallType.unary
    )

    public static let consensusStates = GRPCMethodDescriptor(
      name: "ConsensusStates",
      path: "/ibc.core.client.v1.Query/ConsensusStates",
      type: GRPCCallType.unary
    )

    public static let clientStatus = GRPCMethodDescriptor(
      name: "ClientStatus",
      path: "/ibc.core.client.v1.Query/ClientStatus",
      type: GRPCCallType.unary
    )

    public static let clientParams = GRPCMethodDescriptor(
      name: "ClientParams",
      path: "/ibc.core.client.v1.Query/ClientParams",
      type: GRPCCallType.unary
    )

    public static let upgradedClientState = GRPCMethodDescriptor(
      name: "UpgradedClientState",
      path: "/ibc.core.client.v1.Query/UpgradedClientState",
      type: GRPCCallType.unary
    )

    public static let upgradedConsensusState = GRPCMethodDescriptor(
      name: "UpgradedConsensusState",
      path: "/ibc.core.client.v1.Query/UpgradedConsensusState",
      type: GRPCCallType.unary
    )
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Ibc_Core_Client_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// ClientState queries an IBC light client.
  func clientState(request: Ibc_Core_Client_V1_QueryClientStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStateResponse>

  /// ClientStates queries all the IBC light clients of a chain.
  func clientStates(request: Ibc_Core_Client_V1_QueryClientStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStatesResponse>

  /// ConsensusState queries a consensus state associated with a client state at
  /// a given height.
  func consensusState(request: Ibc_Core_Client_V1_QueryConsensusStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryConsensusStateResponse>

  /// ConsensusStates queries all the consensus state associated with a given
  /// client.
  func consensusStates(request: Ibc_Core_Client_V1_QueryConsensusStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryConsensusStatesResponse>

  /// Status queries the status of an IBC client.
  func clientStatus(request: Ibc_Core_Client_V1_QueryClientStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStatusResponse>

  /// ClientParams queries all parameters of the ibc client.
  func clientParams(request: Ibc_Core_Client_V1_QueryClientParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientParamsResponse>

  /// UpgradedClientState queries an Upgraded IBC light client.
  func upgradedClientState(request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>

  /// UpgradedConsensusState queries an Upgraded IBC consensus state.
  func upgradedConsensusState(request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>
}

extension Ibc_Core_Client_V1_QueryProvider {
  public var serviceName: Substring {
    return Ibc_Core_Client_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ClientState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStateResponse>(),
        interceptors: self.interceptors?.makeClientStateInterceptors() ?? [],
        userFunction: self.clientState(request:context:)
      )

    case "ClientStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatesResponse>(),
        interceptors: self.interceptors?.makeClientStatesInterceptors() ?? [],
        userFunction: self.clientStates(request:context:)
      )

    case "ConsensusState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStateResponse>(),
        interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? [],
        userFunction: self.consensusState(request:context:)
      )

    case "ConsensusStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStatesResponse>(),
        interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? [],
        userFunction: self.consensusStates(request:context:)
      )

    case "ClientStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatusRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatusResponse>(),
        interceptors: self.interceptors?.makeClientStatusInterceptors() ?? [],
        userFunction: self.clientStatus(request:context:)
      )

    case "ClientParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientParamsResponse>(),
        interceptors: self.interceptors?.makeClientParamsInterceptors() ?? [],
        userFunction: self.clientParams(request:context:)
      )

    case "UpgradedClientState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? [],
        userFunction: self.upgradedClientState(request:context:)
      )

    case "UpgradedConsensusState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? [],
        userFunction: self.upgradedConsensusState(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Query provides defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Client_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// ClientState queries an IBC light client.
  @Sendable func clientState(
    request: Ibc_Core_Client_V1_QueryClientStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryClientStateResponse

  /// ClientStates queries all the IBC light clients of a chain.
  @Sendable func clientStates(
    request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryClientStatesResponse

  /// ConsensusState queries a consensus state associated with a client state at
  /// a given height.
  @Sendable func consensusState(
    request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryConsensusStateResponse

  /// ConsensusStates queries all the consensus state associated with a given
  /// client.
  @Sendable func consensusStates(
    request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryConsensusStatesResponse

  /// Status queries the status of an IBC client.
  @Sendable func clientStatus(
    request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryClientStatusResponse

  /// ClientParams queries all parameters of the ibc client.
  @Sendable func clientParams(
    request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryClientParamsResponse

  /// UpgradedClientState queries an Upgraded IBC light client.
  @Sendable func upgradedClientState(
    request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryUpgradedClientStateResponse

  /// UpgradedConsensusState queries an Upgraded IBC consensus state.
  @Sendable func upgradedConsensusState(
    request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Client_V1_QueryAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Client_V1_QueryServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Ibc_Core_Client_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ClientState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStateResponse>(),
        interceptors: self.interceptors?.makeClientStateInterceptors() ?? [],
        wrapping: self.clientState(request:context:)
      )

    case "ClientStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatesResponse>(),
        interceptors: self.interceptors?.makeClientStatesInterceptors() ?? [],
        wrapping: self.clientStates(request:context:)
      )

    case "ConsensusState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStateResponse>(),
        interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? [],
        wrapping: self.consensusState(request:context:)
      )

    case "ConsensusStates":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStatesResponse>(),
        interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? [],
        wrapping: self.consensusStates(request:context:)
      )

    case "ClientStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatusRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatusResponse>(),
        interceptors: self.interceptors?.makeClientStatusInterceptors() ?? [],
        wrapping: self.clientStatus(request:context:)
      )

    case "ClientParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientParamsResponse>(),
        interceptors: self.interceptors?.makeClientParamsInterceptors() ?? [],
        wrapping: self.clientParams(request:context:)
      )

    case "UpgradedClientState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? [],
        wrapping: self.upgradedClientState(request:context:)
      )

    case "UpgradedConsensusState":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? [],
        wrapping: self.upgradedConsensusState(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'clientState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>]

  /// - Returns: Interceptors to use when handling 'clientStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStatesInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>]

  /// - Returns: Interceptors to use when handling 'consensusState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsensusStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>]

  /// - Returns: Interceptors to use when handling 'consensusStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsensusStatesInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>]

  /// - Returns: Interceptors to use when handling 'clientStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStatusInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>]

  /// - Returns: Interceptors to use when handling 'clientParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientParamsInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>]

  /// - Returns: Interceptors to use when handling 'upgradedClientState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpgradedClientStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>]

  /// - Returns: Interceptors to use when handling 'upgradedConsensusState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpgradedConsensusStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>]
}

public enum Ibc_Core_Client_V1_QueryServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ibc.core.client.v1.Query",
    methods: [
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.clientState,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.clientStates,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.consensusState,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.consensusStates,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.clientStatus,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.clientParams,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.upgradedClientState,
      Ibc_Core_Client_V1_QueryServerMetadata.Methods.upgradedConsensusState,
    ]
  )

  public enum Methods {
    public static let clientState = GRPCMethodDescriptor(
      name: "ClientState",
      path: "/ibc.core.client.v1.Query/ClientState",
      type: GRPCCallType.unary
    )

    public static let clientStates = GRPCMethodDescriptor(
      name: "ClientStates",
      path: "/ibc.core.client.v1.Query/ClientStates",
      type: GRPCCallType.unary
    )

    public static let consensusState = GRPCMethodDescriptor(
      name: "ConsensusState",
      path: "/ibc.core.client.v1.Query/ConsensusState",
      type: GRPCCallType.unary
    )

    public static let consensusStates = GRPCMethodDescriptor(
      name: "ConsensusStates",
      path: "/ibc.core.client.v1.Query/ConsensusStates",
      type: GRPCCallType.unary
    )

    public static let clientStatus = GRPCMethodDescriptor(
      name: "ClientStatus",
      path: "/ibc.core.client.v1.Query/ClientStatus",
      type: GRPCCallType.unary
    )

    public static let clientParams = GRPCMethodDescriptor(
      name: "ClientParams",
      path: "/ibc.core.client.v1.Query/ClientParams",
      type: GRPCCallType.unary
    )

    public static let upgradedClientState = GRPCMethodDescriptor(
      name: "UpgradedClientState",
      path: "/ibc.core.client.v1.Query/UpgradedClientState",
      type: GRPCCallType.unary
    )

    public static let upgradedConsensusState = GRPCMethodDescriptor(
      name: "UpgradedConsensusState",
      path: "/ibc.core.client.v1.Query/UpgradedConsensusState",
      type: GRPCCallType.unary
    )
  }
}
