// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/applications/interchain_accounts/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the interchain accounts genesis state
public struct Ibc_Applications_InterchainAccounts_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var controllerGenesisState: Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState {
    get {return _controllerGenesisState ?? Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState()}
    set {_controllerGenesisState = newValue}
  }
  /// Returns true if `controllerGenesisState` has been explicitly set.
  public var hasControllerGenesisState: Bool {return self._controllerGenesisState != nil}
  /// Clears the value of `controllerGenesisState`. Subsequent reads from it will return its default value.
  public mutating func clearControllerGenesisState() {self._controllerGenesisState = nil}

  public var hostGenesisState: Ibc_Applications_InterchainAccounts_V1_HostGenesisState {
    get {return _hostGenesisState ?? Ibc_Applications_InterchainAccounts_V1_HostGenesisState()}
    set {_hostGenesisState = newValue}
  }
  /// Returns true if `hostGenesisState` has been explicitly set.
  public var hasHostGenesisState: Bool {return self._hostGenesisState != nil}
  /// Clears the value of `hostGenesisState`. Subsequent reads from it will return its default value.
  public mutating func clearHostGenesisState() {self._hostGenesisState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _controllerGenesisState: Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState?
  fileprivate var _hostGenesisState: Ibc_Applications_InterchainAccounts_V1_HostGenesisState?
}

/// ControllerGenesisState defines the interchain accounts controller genesis state
public struct Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var activeChannels: [Ibc_Applications_InterchainAccounts_V1_ActiveChannel] = []

  public var interchainAccounts: [Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount] = []

  public var ports: [String] = []

  public var params: Ibc_Applications_InterchainAccounts_Controller_V1_Params {
    get {return _params ?? Ibc_Applications_InterchainAccounts_Controller_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Ibc_Applications_InterchainAccounts_Controller_V1_Params?
}

/// HostGenesisState defines the interchain accounts host genesis state
public struct Ibc_Applications_InterchainAccounts_V1_HostGenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var activeChannels: [Ibc_Applications_InterchainAccounts_V1_ActiveChannel] = []

  public var interchainAccounts: [Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount] = []

  public var port: String = String()

  public var params: Ibc_Applications_InterchainAccounts_Host_V1_Params {
    get {return _params ?? Ibc_Applications_InterchainAccounts_Host_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {self._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _params: Ibc_Applications_InterchainAccounts_Host_V1_Params?
}

/// ActiveChannel contains a connection ID, port ID and associated active channel ID
public struct Ibc_Applications_InterchainAccounts_V1_ActiveChannel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connectionID: String = String()

  public var portID: String = String()

  public var channelID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// RegisteredInterchainAccount contains a connection ID, port ID and associated interchain account address
public struct Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connectionID: String = String()

  public var portID: String = String()

  public var accountAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ibc_Applications_InterchainAccounts_V1_GenesisState: @unchecked Sendable {}
extension Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState: @unchecked Sendable {}
extension Ibc_Applications_InterchainAccounts_V1_HostGenesisState: @unchecked Sendable {}
extension Ibc_Applications_InterchainAccounts_V1_ActiveChannel: @unchecked Sendable {}
extension Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "ibc.applications.interchain_accounts.v1"

extension Ibc_Applications_InterchainAccounts_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "controller_genesis_state"),
    2: .standard(proto: "host_genesis_state"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._controllerGenesisState) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hostGenesisState) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._controllerGenesisState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hostGenesisState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_GenesisState, rhs: Ibc_Applications_InterchainAccounts_V1_GenesisState) -> Bool {
    if lhs._controllerGenesisState != rhs._controllerGenesisState {return false}
    if lhs._hostGenesisState != rhs._hostGenesisState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ControllerGenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "active_channels"),
    2: .standard(proto: "interchain_accounts"),
    3: .same(proto: "ports"),
    4: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.activeChannels) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.interchainAccounts) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.ports) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.activeChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activeChannels, fieldNumber: 1)
    }
    if !self.interchainAccounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interchainAccounts, fieldNumber: 2)
    }
    if !self.ports.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ports, fieldNumber: 3)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState, rhs: Ibc_Applications_InterchainAccounts_V1_ControllerGenesisState) -> Bool {
    if lhs.activeChannels != rhs.activeChannels {return false}
    if lhs.interchainAccounts != rhs.interchainAccounts {return false}
    if lhs.ports != rhs.ports {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_InterchainAccounts_V1_HostGenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HostGenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "active_channels"),
    2: .standard(proto: "interchain_accounts"),
    3: .same(proto: "port"),
    4: .same(proto: "params"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.activeChannels) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.interchainAccounts) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.port) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.activeChannels.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activeChannels, fieldNumber: 1)
    }
    if !self.interchainAccounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.interchainAccounts, fieldNumber: 2)
    }
    if !self.port.isEmpty {
      try visitor.visitSingularStringField(value: self.port, fieldNumber: 3)
    }
    try { if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_HostGenesisState, rhs: Ibc_Applications_InterchainAccounts_V1_HostGenesisState) -> Bool {
    if lhs.activeChannels != rhs.activeChannels {return false}
    if lhs.interchainAccounts != rhs.interchainAccounts {return false}
    if lhs.port != rhs.port {return false}
    if lhs._params != rhs._params {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_InterchainAccounts_V1_ActiveChannel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ActiveChannel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connection_id"),
    2: .standard(proto: "port_id"),
    3: .standard(proto: "channel_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.channelID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 1)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 2)
    }
    if !self.channelID.isEmpty {
      try visitor.visitSingularStringField(value: self.channelID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_ActiveChannel, rhs: Ibc_Applications_InterchainAccounts_V1_ActiveChannel) -> Bool {
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.channelID != rhs.channelID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisteredInterchainAccount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connection_id"),
    2: .standard(proto: "port_id"),
    3: .standard(proto: "account_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.portID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accountAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 1)
    }
    if !self.portID.isEmpty {
      try visitor.visitSingularStringField(value: self.portID, fieldNumber: 2)
    }
    if !self.accountAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.accountAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount, rhs: Ibc_Applications_InterchainAccounts_V1_RegisteredInterchainAccount) -> Bool {
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.portID != rhs.portID {return false}
    if lhs.accountAddress != rhs.accountAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
