//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: penumbra/client/v1alpha1/client.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Methods for accessing chain state that are "oblivious" in the sense that they
/// do not request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// Usage: instantiate `Penumbra_Client_V1alpha1_ObliviousQueryServiceClient`, then call methods of this protocol to make API calls.
public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? { get }

  func compactBlockRange(
    _ request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_Core_Chain_V1alpha1_CompactBlock) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock>

  func chainParameters(
    _ request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>

  func mutableParameters(
    _ request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_Core_Governance_V1alpha1_MutableChainParameter) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter>

  func validatorInfo(
    _ request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_Core_Stake_V1alpha1_ValidatorInfo) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo>

  func assetList(
    _ request: Penumbra_Client_V1alpha1_AssetListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets>
}

extension Penumbra_Client_V1alpha1_ObliviousQueryServiceClientProtocol {
  public var serviceName: String {
    return "penumbra.client.v1alpha1.ObliviousQueryService"
  }

  /// Server streaming call to CompactBlockRange
  ///
  /// - Parameters:
  ///   - request: Request to send to CompactBlockRange.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func compactBlockRange(
    _ request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_Core_Chain_V1alpha1_CompactBlock) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock> {
    return self.makeServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.compactBlockRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompactBlockRangeInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to ChainParameters
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func chainParameters(
    _ request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  /// Server streaming call to MutableParameters
  ///
  /// - Parameters:
  ///   - request: Request to send to MutableParameters.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func mutableParameters(
    _ request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_Core_Governance_V1alpha1_MutableChainParameter) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter> {
    return self.makeServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.mutableParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMutableParametersInterceptors() ?? [],
      handler: handler
    )
  }

  /// Server streaming call to ValidatorInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorInfo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func validatorInfo(
    _ request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_Core_Stake_V1alpha1_ValidatorInfo) -> Void
  ) -> ServerStreamingCall<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo> {
    return self.makeServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.validatorInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInfoInterceptors() ?? [],
      handler: handler
    )
  }

  /// TODO: deprecate in favor of SpecificQuery.AssetInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func assetList(
    _ request: Penumbra_Client_V1alpha1_AssetListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.assetList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetListInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Penumbra_Client_V1alpha1_ObliviousQueryServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Penumbra_Client_V1alpha1_ObliviousQueryServiceNIOClient")
public final class Penumbra_Client_V1alpha1_ObliviousQueryServiceClient: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the penumbra.client.v1alpha1.ObliviousQueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Penumbra_Client_V1alpha1_ObliviousQueryServiceNIOClient: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the penumbra.client.v1alpha1.ObliviousQueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Methods for accessing chain state that are "oblivious" in the sense that they
/// do not request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? { get }

  func makeCompactBlockRangeCall(
    _ request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock>

  func makeChainParametersCall(
    _ request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>

  func makeMutableParametersCall(
    _ request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter>

  func makeValidatorInfoCall(
    _ request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo>

  func makeAssetListCall(
    _ request: Penumbra_Client_V1alpha1_AssetListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCompactBlockRangeCall(
    _ request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.compactBlockRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompactBlockRangeInterceptors() ?? []
    )
  }

  public func makeChainParametersCall(
    _ request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  public func makeMutableParametersCall(
    _ request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.mutableParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMutableParametersInterceptors() ?? []
    )
  }

  public func makeValidatorInfoCall(
    _ request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.validatorInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInfoInterceptors() ?? []
    )
  }

  public func makeAssetListCall(
    _ request: Penumbra_Client_V1alpha1_AssetListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.assetList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncClientProtocol {
  public func compactBlockRange(
    _ request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_Core_Chain_V1alpha1_CompactBlock> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.compactBlockRange.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompactBlockRangeInterceptors() ?? []
    )
  }

  public func chainParameters(
    _ request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Chain_V1alpha1_ChainParameters {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  public func mutableParameters(
    _ request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_Core_Governance_V1alpha1_MutableChainParameter> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.mutableParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMutableParametersInterceptors() ?? []
    )
  }

  public func validatorInfo(
    _ request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_Core_Stake_V1alpha1_ValidatorInfo> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.validatorInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorInfoInterceptors() ?? []
    )
  }

  public func assetList(
    _ request: Penumbra_Client_V1alpha1_AssetListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Chain_V1alpha1_KnownAssets {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.assetList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncClient: Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'compactBlockRange'.
  func makeCompactBlockRangeInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock>]

  /// - Returns: Interceptors to use when invoking 'chainParameters'.
  func makeChainParametersInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>]

  /// - Returns: Interceptors to use when invoking 'mutableParameters'.
  func makeMutableParametersInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter>]

  /// - Returns: Interceptors to use when invoking 'validatorInfo'.
  func makeValidatorInfoInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo>]

  /// - Returns: Interceptors to use when invoking 'assetList'.
  func makeAssetListInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets>]
}

public enum Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ObliviousQueryService",
    fullName: "penumbra.client.v1alpha1.ObliviousQueryService",
    methods: [
      Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.compactBlockRange,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.chainParameters,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.mutableParameters,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.validatorInfo,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceClientMetadata.Methods.assetList,
    ]
  )

  public enum Methods {
    public static let compactBlockRange = GRPCMethodDescriptor(
      name: "CompactBlockRange",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/CompactBlockRange",
      type: GRPCCallType.serverStreaming
    )

    public static let chainParameters = GRPCMethodDescriptor(
      name: "ChainParameters",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/ChainParameters",
      type: GRPCCallType.unary
    )

    public static let mutableParameters = GRPCMethodDescriptor(
      name: "MutableParameters",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/MutableParameters",
      type: GRPCCallType.serverStreaming
    )

    public static let validatorInfo = GRPCMethodDescriptor(
      name: "ValidatorInfo",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/ValidatorInfo",
      type: GRPCCallType.serverStreaming
    )

    public static let assetList = GRPCMethodDescriptor(
      name: "AssetList",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/AssetList",
      type: GRPCCallType.unary
    )
  }
}

/// Methods for accessing chain state that are "specific" in the sense that they
/// request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// Usage: instantiate `Penumbra_Client_V1alpha1_SpecificQueryServiceClient`, then call methods of this protocol to make API calls.
public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? { get }

  func transactionByNote(
    _ request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource>

  func validatorStatus(
    _ request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus>

  func nextValidatorRate(
    _ request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData>

  func batchSwapOutputData(
    _ request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>

  func stubCPMMReserves(
    _ request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves>

  func assetInfo(
    _ request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse>

  func keyValue(
    _ request: Penumbra_Client_V1alpha1_KeyValueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse>
}

extension Penumbra_Client_V1alpha1_SpecificQueryServiceClientProtocol {
  public var serviceName: String {
    return "penumbra.client.v1alpha1.SpecificQueryService"
  }

  /// Unary call to TransactionByNote
  ///
  /// - Parameters:
  ///   - request: Request to send to TransactionByNote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transactionByNote(
    _ request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.transactionByNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByNoteInterceptors() ?? []
    )
  }

  /// Unary call to ValidatorStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func validatorStatus(
    _ request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.validatorStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorStatusInterceptors() ?? []
    )
  }

  /// Unary call to NextValidatorRate
  ///
  /// - Parameters:
  ///   - request: Request to send to NextValidatorRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func nextValidatorRate(
    _ request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.nextValidatorRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextValidatorRateInterceptors() ?? []
    )
  }

  /// Unary call to BatchSwapOutputData
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchSwapOutputData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func batchSwapOutputData(
    _ request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.batchSwapOutputData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSwapOutputDataInterceptors() ?? []
    )
  }

  /// Unary call to StubCPMMReserves
  ///
  /// - Parameters:
  ///   - request: Request to send to StubCPMMReserves.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stubCPMMReserves(
    _ request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.stubCPMMReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStubCPMMReservesInterceptors() ?? []
    )
  }

  /// Unary call to AssetInfo
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func assetInfo(
    _ request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.assetInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetInfoInterceptors() ?? []
    )
  }

  /// General-purpose key-value state query API, that can be used to query
  /// arbitrary keys in the JMT storage.
  ///
  /// - Parameters:
  ///   - request: Request to send to KeyValue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func keyValue(
    _ request: Penumbra_Client_V1alpha1_KeyValueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse> {
    return self.makeUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.keyValue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyValueInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Penumbra_Client_V1alpha1_SpecificQueryServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Penumbra_Client_V1alpha1_SpecificQueryServiceNIOClient")
public final class Penumbra_Client_V1alpha1_SpecificQueryServiceClient: Penumbra_Client_V1alpha1_SpecificQueryServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the penumbra.client.v1alpha1.SpecificQueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Penumbra_Client_V1alpha1_SpecificQueryServiceNIOClient: Penumbra_Client_V1alpha1_SpecificQueryServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the penumbra.client.v1alpha1.SpecificQueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Methods for accessing chain state that are "specific" in the sense that they
/// request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? { get }

  func makeTransactionByNoteCall(
    _ request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource>

  func makeValidatorStatusCall(
    _ request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus>

  func makeNextValidatorRateCall(
    _ request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData>

  func makeBatchSwapOutputDataCall(
    _ request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>

  func makeStubCpmmreservesCall(
    _ request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves>

  func makeAssetInfoCall(
    _ request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse>

  func makeKeyValueCall(
    _ request: Penumbra_Client_V1alpha1_KeyValueRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeTransactionByNoteCall(
    _ request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.transactionByNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByNoteInterceptors() ?? []
    )
  }

  public func makeValidatorStatusCall(
    _ request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.validatorStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorStatusInterceptors() ?? []
    )
  }

  public func makeNextValidatorRateCall(
    _ request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.nextValidatorRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextValidatorRateInterceptors() ?? []
    )
  }

  public func makeBatchSwapOutputDataCall(
    _ request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.batchSwapOutputData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSwapOutputDataInterceptors() ?? []
    )
  }

  public func makeStubCpmmreservesCall(
    _ request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.stubCPMMReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStubCPMMReservesInterceptors() ?? []
    )
  }

  public func makeAssetInfoCall(
    _ request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.assetInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetInfoInterceptors() ?? []
    )
  }

  public func makeKeyValueCall(
    _ request: Penumbra_Client_V1alpha1_KeyValueRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.keyValue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyValueInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncClientProtocol {
  public func transactionByNote(
    _ request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Chain_V1alpha1_NoteSource {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.transactionByNote.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByNoteInterceptors() ?? []
    )
  }

  public func validatorStatus(
    _ request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Stake_V1alpha1_ValidatorStatus {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.validatorStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorStatusInterceptors() ?? []
    )
  }

  public func nextValidatorRate(
    _ request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Stake_V1alpha1_RateData {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.nextValidatorRate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextValidatorRateInterceptors() ?? []
    )
  }

  public func batchSwapOutputData(
    _ request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.batchSwapOutputData.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchSwapOutputDataInterceptors() ?? []
    )
  }

  public func stubCPMMReserves(
    _ request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Dex_V1alpha1_Reserves {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.stubCPMMReserves.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStubCPMMReservesInterceptors() ?? []
    )
  }

  public func assetInfo(
    _ request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Client_V1alpha1_AssetInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.assetInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetInfoInterceptors() ?? []
    )
  }

  public func keyValue(
    _ request: Penumbra_Client_V1alpha1_KeyValueRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Client_V1alpha1_KeyValueResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.keyValue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeyValueInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncClient: Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'transactionByNote'.
  func makeTransactionByNoteInterceptors() -> [ClientInterceptor<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource>]

  /// - Returns: Interceptors to use when invoking 'validatorStatus'.
  func makeValidatorStatusInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus>]

  /// - Returns: Interceptors to use when invoking 'nextValidatorRate'.
  func makeNextValidatorRateInterceptors() -> [ClientInterceptor<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData>]

  /// - Returns: Interceptors to use when invoking 'batchSwapOutputData'.
  func makeBatchSwapOutputDataInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>]

  /// - Returns: Interceptors to use when invoking 'stubCPMMReserves'.
  func makeStubCPMMReservesInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves>]

  /// - Returns: Interceptors to use when invoking 'assetInfo'.
  func makeAssetInfoInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'keyValue'.
  func makeKeyValueInterceptors() -> [ClientInterceptor<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse>]
}

public enum Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SpecificQueryService",
    fullName: "penumbra.client.v1alpha1.SpecificQueryService",
    methods: [
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.transactionByNote,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.validatorStatus,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.nextValidatorRate,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.batchSwapOutputData,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.stubCPMMReserves,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.assetInfo,
      Penumbra_Client_V1alpha1_SpecificQueryServiceClientMetadata.Methods.keyValue,
    ]
  )

  public enum Methods {
    public static let transactionByNote = GRPCMethodDescriptor(
      name: "TransactionByNote",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/TransactionByNote",
      type: GRPCCallType.unary
    )

    public static let validatorStatus = GRPCMethodDescriptor(
      name: "ValidatorStatus",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorStatus",
      type: GRPCCallType.unary
    )

    public static let nextValidatorRate = GRPCMethodDescriptor(
      name: "NextValidatorRate",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/NextValidatorRate",
      type: GRPCCallType.unary
    )

    public static let batchSwapOutputData = GRPCMethodDescriptor(
      name: "BatchSwapOutputData",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/BatchSwapOutputData",
      type: GRPCCallType.unary
    )

    public static let stubCPMMReserves = GRPCMethodDescriptor(
      name: "StubCPMMReserves",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/StubCPMMReserves",
      type: GRPCCallType.unary
    )

    public static let assetInfo = GRPCMethodDescriptor(
      name: "AssetInfo",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/AssetInfo",
      type: GRPCCallType.unary
    )

    public static let keyValue = GRPCMethodDescriptor(
      name: "KeyValue",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/KeyValue",
      type: GRPCCallType.unary
    )
  }
}

/// Methods for accessing chain state that are "oblivious" in the sense that they
/// do not request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceProvider: CallHandlerProvider {
  var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceServerInterceptorFactoryProtocol? { get }

  func compactBlockRange(request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest, context: StreamingResponseCallContext<Penumbra_Core_Chain_V1alpha1_CompactBlock>) -> EventLoopFuture<GRPCStatus>

  func chainParameters(request: Penumbra_Client_V1alpha1_ChainParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Chain_V1alpha1_ChainParameters>

  func mutableParameters(request: Penumbra_Client_V1alpha1_MutableParametersRequest, context: StreamingResponseCallContext<Penumbra_Core_Governance_V1alpha1_MutableChainParameter>) -> EventLoopFuture<GRPCStatus>

  func validatorInfo(request: Penumbra_Client_V1alpha1_ValidatorInfoRequest, context: StreamingResponseCallContext<Penumbra_Core_Stake_V1alpha1_ValidatorInfo>) -> EventLoopFuture<GRPCStatus>

  /// TODO: deprecate in favor of SpecificQuery.AssetInfo
  func assetList(request: Penumbra_Client_V1alpha1_AssetListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Chain_V1alpha1_KnownAssets>
}

extension Penumbra_Client_V1alpha1_ObliviousQueryServiceProvider {
  public var serviceName: Substring {
    return Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CompactBlockRange":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_CompactBlockRangeRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_CompactBlock>(),
        interceptors: self.interceptors?.makeCompactBlockRangeInterceptors() ?? [],
        userFunction: self.compactBlockRange(request:context:)
      )

    case "ChainParameters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_ChainParameters>(),
        interceptors: self.interceptors?.makeChainParametersInterceptors() ?? [],
        userFunction: self.chainParameters(request:context:)
      )

    case "MutableParameters":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_MutableParametersRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Governance_V1alpha1_MutableChainParameter>(),
        interceptors: self.interceptors?.makeMutableParametersInterceptors() ?? [],
        userFunction: self.mutableParameters(request:context:)
      )

    case "ValidatorInfo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ValidatorInfoRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_ValidatorInfo>(),
        interceptors: self.interceptors?.makeValidatorInfoInterceptors() ?? [],
        userFunction: self.validatorInfo(request:context:)
      )

    case "AssetList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_AssetListRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_KnownAssets>(),
        interceptors: self.interceptors?.makeAssetListInterceptors() ?? [],
        userFunction: self.assetList(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Methods for accessing chain state that are "oblivious" in the sense that they
/// do not request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func compactBlockRange(
    request: Penumbra_Client_V1alpha1_CompactBlockRangeRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_Core_Chain_V1alpha1_CompactBlock>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func chainParameters(
    request: Penumbra_Client_V1alpha1_ChainParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Chain_V1alpha1_ChainParameters

  @Sendable func mutableParameters(
    request: Penumbra_Client_V1alpha1_MutableParametersRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_Core_Governance_V1alpha1_MutableChainParameter>,
    context: GRPCAsyncServerCallContext
  ) async throws

  @Sendable func validatorInfo(
    request: Penumbra_Client_V1alpha1_ValidatorInfoRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_Core_Stake_V1alpha1_ValidatorInfo>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// TODO: deprecate in favor of SpecificQuery.AssetInfo
  @Sendable func assetList(
    request: Penumbra_Client_V1alpha1_AssetListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Chain_V1alpha1_KnownAssets
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_ObliviousQueryServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Penumbra_Client_V1alpha1_ObliviousQueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CompactBlockRange":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_CompactBlockRangeRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_CompactBlock>(),
        interceptors: self.interceptors?.makeCompactBlockRangeInterceptors() ?? [],
        wrapping: self.compactBlockRange(request:responseStream:context:)
      )

    case "ChainParameters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_ChainParameters>(),
        interceptors: self.interceptors?.makeChainParametersInterceptors() ?? [],
        wrapping: self.chainParameters(request:context:)
      )

    case "MutableParameters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_MutableParametersRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Governance_V1alpha1_MutableChainParameter>(),
        interceptors: self.interceptors?.makeMutableParametersInterceptors() ?? [],
        wrapping: self.mutableParameters(request:responseStream:context:)
      )

    case "ValidatorInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ValidatorInfoRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_ValidatorInfo>(),
        interceptors: self.interceptors?.makeValidatorInfoInterceptors() ?? [],
        wrapping: self.validatorInfo(request:responseStream:context:)
      )

    case "AssetList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_AssetListRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_KnownAssets>(),
        interceptors: self.interceptors?.makeAssetListInterceptors() ?? [],
        wrapping: self.assetList(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Client_V1alpha1_ObliviousQueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'compactBlockRange'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompactBlockRangeInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_CompactBlockRangeRequest, Penumbra_Core_Chain_V1alpha1_CompactBlock>]

  /// - Returns: Interceptors to use when handling 'chainParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainParametersInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>]

  /// - Returns: Interceptors to use when handling 'mutableParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMutableParametersInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_MutableParametersRequest, Penumbra_Core_Governance_V1alpha1_MutableChainParameter>]

  /// - Returns: Interceptors to use when handling 'validatorInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorInfoInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_ValidatorInfoRequest, Penumbra_Core_Stake_V1alpha1_ValidatorInfo>]

  /// - Returns: Interceptors to use when handling 'assetList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetListInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_AssetListRequest, Penumbra_Core_Chain_V1alpha1_KnownAssets>]
}

public enum Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ObliviousQueryService",
    fullName: "penumbra.client.v1alpha1.ObliviousQueryService",
    methods: [
      Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.Methods.compactBlockRange,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.Methods.chainParameters,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.Methods.mutableParameters,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.Methods.validatorInfo,
      Penumbra_Client_V1alpha1_ObliviousQueryServiceServerMetadata.Methods.assetList,
    ]
  )

  public enum Methods {
    public static let compactBlockRange = GRPCMethodDescriptor(
      name: "CompactBlockRange",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/CompactBlockRange",
      type: GRPCCallType.serverStreaming
    )

    public static let chainParameters = GRPCMethodDescriptor(
      name: "ChainParameters",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/ChainParameters",
      type: GRPCCallType.unary
    )

    public static let mutableParameters = GRPCMethodDescriptor(
      name: "MutableParameters",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/MutableParameters",
      type: GRPCCallType.serverStreaming
    )

    public static let validatorInfo = GRPCMethodDescriptor(
      name: "ValidatorInfo",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/ValidatorInfo",
      type: GRPCCallType.serverStreaming
    )

    public static let assetList = GRPCMethodDescriptor(
      name: "AssetList",
      path: "/penumbra.client.v1alpha1.ObliviousQueryService/AssetList",
      type: GRPCCallType.unary
    )
  }
}
/// Methods for accessing chain state that are "specific" in the sense that they
/// request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceProvider: CallHandlerProvider {
  var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceServerInterceptorFactoryProtocol? { get }

  func transactionByNote(request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Chain_V1alpha1_NoteSource>

  func validatorStatus(request: Penumbra_Client_V1alpha1_ValidatorStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Stake_V1alpha1_ValidatorStatus>

  func nextValidatorRate(request: Penumbra_Core_Crypto_V1alpha1_IdentityKey, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Stake_V1alpha1_RateData>

  func batchSwapOutputData(request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>

  func stubCPMMReserves(request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Dex_V1alpha1_Reserves>

  func assetInfo(request: Penumbra_Client_V1alpha1_AssetInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Client_V1alpha1_AssetInfoResponse>

  /// General-purpose key-value state query API, that can be used to query
  /// arbitrary keys in the JMT storage.
  func keyValue(request: Penumbra_Client_V1alpha1_KeyValueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Client_V1alpha1_KeyValueResponse>
}

extension Penumbra_Client_V1alpha1_SpecificQueryServiceProvider {
  public var serviceName: Substring {
    return Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "TransactionByNote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Core_Crypto_V1alpha1_NoteCommitment>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_NoteSource>(),
        interceptors: self.interceptors?.makeTransactionByNoteInterceptors() ?? [],
        userFunction: self.transactionByNote(request:context:)
      )

    case "ValidatorStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ValidatorStatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_ValidatorStatus>(),
        interceptors: self.interceptors?.makeValidatorStatusInterceptors() ?? [],
        userFunction: self.validatorStatus(request:context:)
      )

    case "NextValidatorRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Core_Crypto_V1alpha1_IdentityKey>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_RateData>(),
        interceptors: self.interceptors?.makeNextValidatorRateInterceptors() ?? [],
        userFunction: self.nextValidatorRate(request:context:)
      )

    case "BatchSwapOutputData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>(),
        interceptors: self.interceptors?.makeBatchSwapOutputDataInterceptors() ?? [],
        userFunction: self.batchSwapOutputData(request:context:)
      )

    case "StubCPMMReserves":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_StubCPMMReservesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Dex_V1alpha1_Reserves>(),
        interceptors: self.interceptors?.makeStubCPMMReservesInterceptors() ?? [],
        userFunction: self.stubCPMMReserves(request:context:)
      )

    case "AssetInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_AssetInfoRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Client_V1alpha1_AssetInfoResponse>(),
        interceptors: self.interceptors?.makeAssetInfoInterceptors() ?? [],
        userFunction: self.assetInfo(request:context:)
      )

    case "KeyValue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_KeyValueRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Client_V1alpha1_KeyValueResponse>(),
        interceptors: self.interceptors?.makeKeyValueInterceptors() ?? [],
        userFunction: self.keyValue(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Methods for accessing chain state that are "specific" in the sense that they
/// request specific portions of the chain state that could reveal private
/// client data.  For instance, requesting all asset denominations is oblivious,
/// but requesting the asset denomination for a specific asset id is not, because
/// it reveals that the client has an interest in that asset specifically.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func transactionByNote(
    request: Penumbra_Core_Crypto_V1alpha1_NoteCommitment,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Chain_V1alpha1_NoteSource

  @Sendable func validatorStatus(
    request: Penumbra_Client_V1alpha1_ValidatorStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Stake_V1alpha1_ValidatorStatus

  @Sendable func nextValidatorRate(
    request: Penumbra_Core_Crypto_V1alpha1_IdentityKey,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Stake_V1alpha1_RateData

  @Sendable func batchSwapOutputData(
    request: Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData

  @Sendable func stubCPMMReserves(
    request: Penumbra_Client_V1alpha1_StubCPMMReservesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Dex_V1alpha1_Reserves

  @Sendable func assetInfo(
    request: Penumbra_Client_V1alpha1_AssetInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Client_V1alpha1_AssetInfoResponse

  /// General-purpose key-value state query API, that can be used to query
  /// arbitrary keys in the JMT storage.
  @Sendable func keyValue(
    request: Penumbra_Client_V1alpha1_KeyValueRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Client_V1alpha1_KeyValueResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Client_V1alpha1_SpecificQueryServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Penumbra_Client_V1alpha1_SpecificQueryServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "TransactionByNote":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Core_Crypto_V1alpha1_NoteCommitment>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_NoteSource>(),
        interceptors: self.interceptors?.makeTransactionByNoteInterceptors() ?? [],
        wrapping: self.transactionByNote(request:context:)
      )

    case "ValidatorStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_ValidatorStatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_ValidatorStatus>(),
        interceptors: self.interceptors?.makeValidatorStatusInterceptors() ?? [],
        wrapping: self.validatorStatus(request:context:)
      )

    case "NextValidatorRate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Core_Crypto_V1alpha1_IdentityKey>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Stake_V1alpha1_RateData>(),
        interceptors: self.interceptors?.makeNextValidatorRateInterceptors() ?? [],
        wrapping: self.nextValidatorRate(request:context:)
      )

    case "BatchSwapOutputData":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>(),
        interceptors: self.interceptors?.makeBatchSwapOutputDataInterceptors() ?? [],
        wrapping: self.batchSwapOutputData(request:context:)
      )

    case "StubCPMMReserves":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_StubCPMMReservesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Dex_V1alpha1_Reserves>(),
        interceptors: self.interceptors?.makeStubCPMMReservesInterceptors() ?? [],
        wrapping: self.stubCPMMReserves(request:context:)
      )

    case "AssetInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_AssetInfoRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Client_V1alpha1_AssetInfoResponse>(),
        interceptors: self.interceptors?.makeAssetInfoInterceptors() ?? [],
        wrapping: self.assetInfo(request:context:)
      )

    case "KeyValue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Client_V1alpha1_KeyValueRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Client_V1alpha1_KeyValueResponse>(),
        interceptors: self.interceptors?.makeKeyValueInterceptors() ?? [],
        wrapping: self.keyValue(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Client_V1alpha1_SpecificQueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'transactionByNote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionByNoteInterceptors() -> [ServerInterceptor<Penumbra_Core_Crypto_V1alpha1_NoteCommitment, Penumbra_Core_Chain_V1alpha1_NoteSource>]

  /// - Returns: Interceptors to use when handling 'validatorStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorStatusInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_ValidatorStatusRequest, Penumbra_Core_Stake_V1alpha1_ValidatorStatus>]

  /// - Returns: Interceptors to use when handling 'nextValidatorRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextValidatorRateInterceptors() -> [ServerInterceptor<Penumbra_Core_Crypto_V1alpha1_IdentityKey, Penumbra_Core_Stake_V1alpha1_RateData>]

  /// - Returns: Interceptors to use when handling 'batchSwapOutputData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchSwapOutputDataInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_BatchSwapOutputDataRequest, Penumbra_Core_Dex_V1alpha1_BatchSwapOutputData>]

  /// - Returns: Interceptors to use when handling 'stubCPMMReserves'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStubCPMMReservesInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_StubCPMMReservesRequest, Penumbra_Core_Dex_V1alpha1_Reserves>]

  /// - Returns: Interceptors to use when handling 'assetInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetInfoInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_AssetInfoRequest, Penumbra_Client_V1alpha1_AssetInfoResponse>]

  /// - Returns: Interceptors to use when handling 'keyValue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeyValueInterceptors() -> [ServerInterceptor<Penumbra_Client_V1alpha1_KeyValueRequest, Penumbra_Client_V1alpha1_KeyValueResponse>]
}

public enum Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "SpecificQueryService",
    fullName: "penumbra.client.v1alpha1.SpecificQueryService",
    methods: [
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.transactionByNote,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.validatorStatus,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.nextValidatorRate,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.batchSwapOutputData,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.stubCPMMReserves,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.assetInfo,
      Penumbra_Client_V1alpha1_SpecificQueryServiceServerMetadata.Methods.keyValue,
    ]
  )

  public enum Methods {
    public static let transactionByNote = GRPCMethodDescriptor(
      name: "TransactionByNote",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/TransactionByNote",
      type: GRPCCallType.unary
    )

    public static let validatorStatus = GRPCMethodDescriptor(
      name: "ValidatorStatus",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/ValidatorStatus",
      type: GRPCCallType.unary
    )

    public static let nextValidatorRate = GRPCMethodDescriptor(
      name: "NextValidatorRate",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/NextValidatorRate",
      type: GRPCCallType.unary
    )

    public static let batchSwapOutputData = GRPCMethodDescriptor(
      name: "BatchSwapOutputData",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/BatchSwapOutputData",
      type: GRPCCallType.unary
    )

    public static let stubCPMMReserves = GRPCMethodDescriptor(
      name: "StubCPMMReserves",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/StubCPMMReserves",
      type: GRPCCallType.unary
    )

    public static let assetInfo = GRPCMethodDescriptor(
      name: "AssetInfo",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/AssetInfo",
      type: GRPCCallType.unary
    )

    public static let keyValue = GRPCMethodDescriptor(
      name: "KeyValue",
      path: "/penumbra.client.v1alpha1.SpecificQueryService/KeyValue",
      type: GRPCCallType.unary
    )
  }
}
