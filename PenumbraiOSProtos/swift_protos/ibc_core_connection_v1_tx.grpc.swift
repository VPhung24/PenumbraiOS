//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/connection/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Msg defines the ibc/connection Msg service.
///
/// Usage: instantiate `Ibc_Core_Connection_V1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Ibc_Core_Connection_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? { get }

  func connectionOpenInit(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>

  func connectionOpenTry(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>

  func connectionOpenAck(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>

  func connectionOpenConfirm(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>
}

extension Ibc_Core_Connection_V1_MsgClientProtocol {
  public var serviceName: String {
    return "ibc.core.connection.v1.Msg"
  }

  /// ConnectionOpenInit defines a rpc handler method for MsgConnectionOpenInit.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectionOpenInit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectionOpenInit(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenInitInterceptors() ?? []
    )
  }

  /// ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectionOpenTry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectionOpenTry(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenTryInterceptors() ?? []
    )
  }

  /// ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectionOpenAck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectionOpenAck(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenAckInterceptors() ?? []
    )
  }

  /// ConnectionOpenConfirm defines a rpc handler method for
  /// MsgConnectionOpenConfirm.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectionOpenConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectionOpenConfirm(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenConfirmInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ibc_Core_Connection_V1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ibc_Core_Connection_V1_MsgNIOClient")
public final class Ibc_Core_Connection_V1_MsgClient: Ibc_Core_Connection_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.connection.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ibc_Core_Connection_V1_MsgNIOClient: Ibc_Core_Connection_V1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.connection.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the ibc/connection Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Connection_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeConnectionOpenInitCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>

  func makeConnectionOpenTryCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>

  func makeConnectionOpenAckCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>

  func makeConnectionOpenConfirmCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Connection_V1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Connection_V1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeConnectionOpenInitCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenInitInterceptors() ?? []
    )
  }

  public func makeConnectionOpenTryCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenTryInterceptors() ?? []
    )
  }

  public func makeConnectionOpenAckCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenAckInterceptors() ?? []
    )
  }

  public func makeConnectionOpenConfirmCall(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenConfirmInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Connection_V1_MsgAsyncClientProtocol {
  public func connectionOpenInit(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenInitInterceptors() ?? []
    )
  }

  public func connectionOpenTry(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenTryInterceptors() ?? []
    )
  }

  public func connectionOpenAck(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenAckInterceptors() ?? []
    )
  }

  public func connectionOpenConfirm(
    _ request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectionOpenConfirmInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ibc_Core_Connection_V1_MsgAsyncClient: Ibc_Core_Connection_V1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Connection_V1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'connectionOpenInit'.
  func makeConnectionOpenInitInterceptors() -> [ClientInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>]

  /// - Returns: Interceptors to use when invoking 'connectionOpenTry'.
  func makeConnectionOpenTryInterceptors() -> [ClientInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>]

  /// - Returns: Interceptors to use when invoking 'connectionOpenAck'.
  func makeConnectionOpenAckInterceptors() -> [ClientInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>]

  /// - Returns: Interceptors to use when invoking 'connectionOpenConfirm'.
  func makeConnectionOpenConfirmInterceptors() -> [ClientInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>]
}

public enum Ibc_Core_Connection_V1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.connection.v1.Msg",
    methods: [
      Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenInit,
      Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenTry,
      Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenAck,
      Ibc_Core_Connection_V1_MsgClientMetadata.Methods.connectionOpenConfirm,
    ]
  )

  public enum Methods {
    public static let connectionOpenInit = GRPCMethodDescriptor(
      name: "ConnectionOpenInit",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenInit",
      type: GRPCCallType.unary
    )

    public static let connectionOpenTry = GRPCMethodDescriptor(
      name: "ConnectionOpenTry",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenTry",
      type: GRPCCallType.unary
    )

    public static let connectionOpenAck = GRPCMethodDescriptor(
      name: "ConnectionOpenAck",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenAck",
      type: GRPCCallType.unary
    )

    public static let connectionOpenConfirm = GRPCMethodDescriptor(
      name: "ConnectionOpenConfirm",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenConfirm",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the ibc/connection Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Ibc_Core_Connection_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Connection_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ConnectionOpenInit defines a rpc handler method for MsgConnectionOpenInit.
  func connectionOpenInit(request: Ibc_Core_Connection_V1_MsgConnectionOpenInit, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>

  /// ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry.
  func connectionOpenTry(request: Ibc_Core_Connection_V1_MsgConnectionOpenTry, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>

  /// ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck.
  func connectionOpenAck(request: Ibc_Core_Connection_V1_MsgConnectionOpenAck, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>

  /// ConnectionOpenConfirm defines a rpc handler method for
  /// MsgConnectionOpenConfirm.
  func connectionOpenConfirm(request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>
}

extension Ibc_Core_Connection_V1_MsgProvider {
  public var serviceName: Substring {
    return Ibc_Core_Connection_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ConnectionOpenInit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenInitInterceptors() ?? [],
        userFunction: self.connectionOpenInit(request:context:)
      )

    case "ConnectionOpenTry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenTry>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenTryInterceptors() ?? [],
        userFunction: self.connectionOpenTry(request:context:)
      )

    case "ConnectionOpenAck":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenAck>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenAckInterceptors() ?? [],
        userFunction: self.connectionOpenAck(request:context:)
      )

    case "ConnectionOpenConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenConfirmInterceptors() ?? [],
        userFunction: self.connectionOpenConfirm(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Msg defines the ibc/connection Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Connection_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Connection_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ConnectionOpenInit defines a rpc handler method for MsgConnectionOpenInit.
  @Sendable func connectionOpenInit(
    request: Ibc_Core_Connection_V1_MsgConnectionOpenInit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse

  /// ConnectionOpenTry defines a rpc handler method for MsgConnectionOpenTry.
  @Sendable func connectionOpenTry(
    request: Ibc_Core_Connection_V1_MsgConnectionOpenTry,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse

  /// ConnectionOpenAck defines a rpc handler method for MsgConnectionOpenAck.
  @Sendable func connectionOpenAck(
    request: Ibc_Core_Connection_V1_MsgConnectionOpenAck,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse

  /// ConnectionOpenConfirm defines a rpc handler method for
  /// MsgConnectionOpenConfirm.
  @Sendable func connectionOpenConfirm(
    request: Ibc_Core_Connection_V1_MsgConnectionOpenConfirm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Connection_V1_MsgAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Connection_V1_MsgServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Ibc_Core_Connection_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Ibc_Core_Connection_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ConnectionOpenInit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenInitInterceptors() ?? [],
        wrapping: self.connectionOpenInit(request:context:)
      )

    case "ConnectionOpenTry":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenTry>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenTryInterceptors() ?? [],
        wrapping: self.connectionOpenTry(request:context:)
      )

    case "ConnectionOpenAck":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenAck>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenAckInterceptors() ?? [],
        wrapping: self.connectionOpenAck(request:context:)
      )

    case "ConnectionOpenConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>(),
        interceptors: self.interceptors?.makeConnectionOpenConfirmInterceptors() ?? [],
        wrapping: self.connectionOpenConfirm(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Connection_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'connectionOpenInit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectionOpenInitInterceptors() -> [ServerInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenInit, Ibc_Core_Connection_V1_MsgConnectionOpenInitResponse>]

  /// - Returns: Interceptors to use when handling 'connectionOpenTry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectionOpenTryInterceptors() -> [ServerInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenTry, Ibc_Core_Connection_V1_MsgConnectionOpenTryResponse>]

  /// - Returns: Interceptors to use when handling 'connectionOpenAck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectionOpenAckInterceptors() -> [ServerInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenAck, Ibc_Core_Connection_V1_MsgConnectionOpenAckResponse>]

  /// - Returns: Interceptors to use when handling 'connectionOpenConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectionOpenConfirmInterceptors() -> [ServerInterceptor<Ibc_Core_Connection_V1_MsgConnectionOpenConfirm, Ibc_Core_Connection_V1_MsgConnectionOpenConfirmResponse>]
}

public enum Ibc_Core_Connection_V1_MsgServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.connection.v1.Msg",
    methods: [
      Ibc_Core_Connection_V1_MsgServerMetadata.Methods.connectionOpenInit,
      Ibc_Core_Connection_V1_MsgServerMetadata.Methods.connectionOpenTry,
      Ibc_Core_Connection_V1_MsgServerMetadata.Methods.connectionOpenAck,
      Ibc_Core_Connection_V1_MsgServerMetadata.Methods.connectionOpenConfirm,
    ]
  )

  public enum Methods {
    public static let connectionOpenInit = GRPCMethodDescriptor(
      name: "ConnectionOpenInit",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenInit",
      type: GRPCCallType.unary
    )

    public static let connectionOpenTry = GRPCMethodDescriptor(
      name: "ConnectionOpenTry",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenTry",
      type: GRPCCallType.unary
    )

    public static let connectionOpenAck = GRPCMethodDescriptor(
      name: "ConnectionOpenAck",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenAck",
      type: GRPCCallType.unary
    )

    public static let connectionOpenConfirm = GRPCMethodDescriptor(
      name: "ConnectionOpenConfirm",
      path: "/ibc.core.connection.v1.Msg/ConnectionOpenConfirm",
      type: GRPCCallType.unary
    )
  }
}
