//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/channel/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Msg defines the ibc/channel Msg service.
///
/// Usage: instantiate `Ibc_Core_Channel_V1_MsgClient`, then call methods of this protocol to make API calls.
public protocol Ibc_Core_Channel_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? { get }

  func channelOpenInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>

  func channelOpenTry(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>

  func channelOpenAck(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>

  func channelOpenConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>

  func channelCloseInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>

  func channelCloseConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>

  func recvPacket(
    _ request: Ibc_Core_Channel_V1_MsgRecvPacket,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse>

  func timeout(
    _ request: Ibc_Core_Channel_V1_MsgTimeout,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse>

  func timeoutOnClose(
    _ request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>

  func acknowledgement(
    _ request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse>
}

extension Ibc_Core_Channel_V1_MsgClientProtocol {
  public var serviceName: String {
    return "ibc.core.channel.v1.Msg"
  }

  /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelOpenInit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelOpenInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenInitInterceptors() ?? []
    )
  }

  /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelOpenTry.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelOpenTry(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenTryInterceptors() ?? []
    )
  }

  /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelOpenAck.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelOpenAck(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenAckInterceptors() ?? []
    )
  }

  /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelOpenConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelOpenConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenConfirmInterceptors() ?? []
    )
  }

  /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelCloseInit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelCloseInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseInitInterceptors() ?? []
    )
  }

  /// ChannelCloseConfirm defines a rpc handler method for
  /// MsgChannelCloseConfirm.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelCloseConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelCloseConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseConfirmInterceptors() ?? []
    )
  }

  /// RecvPacket defines a rpc handler method for MsgRecvPacket.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecvPacket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func recvPacket(
    _ request: Ibc_Core_Channel_V1_MsgRecvPacket,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.recvPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecvPacketInterceptors() ?? []
    )
  }

  /// Timeout defines a rpc handler method for MsgTimeout.
  ///
  /// - Parameters:
  ///   - request: Request to send to Timeout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func timeout(
    _ request: Ibc_Core_Channel_V1_MsgTimeout,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
  ///
  /// - Parameters:
  ///   - request: Request to send to TimeoutOnClose.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func timeoutOnClose(
    _ request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeoutOnClose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutOnCloseInterceptors() ?? []
    )
  }

  /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
  ///
  /// - Parameters:
  ///   - request: Request to send to Acknowledgement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func acknowledgement(
    _ request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse> {
    return self.makeUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.acknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgementInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Ibc_Core_Channel_V1_MsgClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Ibc_Core_Channel_V1_MsgNIOClient")
public final class Ibc_Core_Channel_V1_MsgClient: Ibc_Core_Channel_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ibc.core.channel.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Ibc_Core_Channel_V1_MsgNIOClient: Ibc_Core_Channel_V1_MsgClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.channel.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// Msg defines the ibc/channel Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Channel_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeChannelOpenInitCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>

  func makeChannelOpenTryCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>

  func makeChannelOpenAckCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>

  func makeChannelOpenConfirmCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>

  func makeChannelCloseInitCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>

  func makeChannelCloseConfirmCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>

  func makeRecvPacketCall(
    _ request: Ibc_Core_Channel_V1_MsgRecvPacket,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse>

  func makeTimeoutCall(
    _ request: Ibc_Core_Channel_V1_MsgTimeout,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse>

  func makeTimeoutOnCloseCall(
    _ request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>

  func makeAcknowledgementCall(
    _ request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V1_MsgAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Channel_V1_MsgClientMetadata.serviceDescriptor
  }

  public var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeChannelOpenInitCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenInitInterceptors() ?? []
    )
  }

  public func makeChannelOpenTryCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenTryInterceptors() ?? []
    )
  }

  public func makeChannelOpenAckCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenAckInterceptors() ?? []
    )
  }

  public func makeChannelOpenConfirmCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenConfirmInterceptors() ?? []
    )
  }

  public func makeChannelCloseInitCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseInitInterceptors() ?? []
    )
  }

  public func makeChannelCloseConfirmCall(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseConfirmInterceptors() ?? []
    )
  }

  public func makeRecvPacketCall(
    _ request: Ibc_Core_Channel_V1_MsgRecvPacket,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.recvPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecvPacketInterceptors() ?? []
    )
  }

  public func makeTimeoutCall(
    _ request: Ibc_Core_Channel_V1_MsgTimeout,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  public func makeTimeoutOnCloseCall(
    _ request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeoutOnClose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutOnCloseInterceptors() ?? []
    )
  }

  public func makeAcknowledgementCall(
    _ request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse> {
    return self.makeAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.acknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgementInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V1_MsgAsyncClientProtocol {
  public func channelOpenInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenInitResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenInitInterceptors() ?? []
    )
  }

  public func channelOpenTry(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenTryResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenTry.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenTryInterceptors() ?? []
    )
  }

  public func channelOpenAck(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenAckResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenAck.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenAckInterceptors() ?? []
    )
  }

  public func channelOpenConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelOpenConfirmInterceptors() ?? []
    )
  }

  public func channelCloseInit(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelCloseInitResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseInit.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseInitInterceptors() ?? []
    )
  }

  public func channelCloseConfirm(
    _ request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChannelCloseConfirmInterceptors() ?? []
    )
  }

  public func recvPacket(
    _ request: Ibc_Core_Channel_V1_MsgRecvPacket,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgRecvPacketResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.recvPacket.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecvPacketInterceptors() ?? []
    )
  }

  public func timeout(
    _ request: Ibc_Core_Channel_V1_MsgTimeout,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgTimeoutResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutInterceptors() ?? []
    )
  }

  public func timeoutOnClose(
    _ request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeoutOnClose.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTimeoutOnCloseInterceptors() ?? []
    )
  }

  public func acknowledgement(
    _ request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    callOptions: CallOptions? = nil
  ) async throws -> Ibc_Core_Channel_V1_MsgAcknowledgementResponse {
    return try await self.performAsyncUnaryCall(
      path: Ibc_Core_Channel_V1_MsgClientMetadata.Methods.acknowledgement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAcknowledgementInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Ibc_Core_Channel_V1_MsgAsyncClient: Ibc_Core_Channel_V1_MsgAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Channel_V1_MsgClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'channelOpenInit'.
  func makeChannelOpenInitInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>]

  /// - Returns: Interceptors to use when invoking 'channelOpenTry'.
  func makeChannelOpenTryInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>]

  /// - Returns: Interceptors to use when invoking 'channelOpenAck'.
  func makeChannelOpenAckInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>]

  /// - Returns: Interceptors to use when invoking 'channelOpenConfirm'.
  func makeChannelOpenConfirmInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'channelCloseInit'.
  func makeChannelCloseInitInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>]

  /// - Returns: Interceptors to use when invoking 'channelCloseConfirm'.
  func makeChannelCloseConfirmInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'recvPacket'.
  func makeRecvPacketInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse>]

  /// - Returns: Interceptors to use when invoking 'timeout'.
  func makeTimeoutInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse>]

  /// - Returns: Interceptors to use when invoking 'timeoutOnClose'.
  func makeTimeoutOnCloseInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>]

  /// - Returns: Interceptors to use when invoking 'acknowledgement'.
  func makeAcknowledgementInterceptors() -> [ClientInterceptor<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse>]
}

public enum Ibc_Core_Channel_V1_MsgClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.channel.v1.Msg",
    methods: [
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenInit,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenTry,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenAck,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelOpenConfirm,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseInit,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.channelCloseConfirm,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.recvPacket,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeout,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.timeoutOnClose,
      Ibc_Core_Channel_V1_MsgClientMetadata.Methods.acknowledgement,
    ]
  )

  public enum Methods {
    public static let channelOpenInit = GRPCMethodDescriptor(
      name: "ChannelOpenInit",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenInit",
      type: GRPCCallType.unary
    )

    public static let channelOpenTry = GRPCMethodDescriptor(
      name: "ChannelOpenTry",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenTry",
      type: GRPCCallType.unary
    )

    public static let channelOpenAck = GRPCMethodDescriptor(
      name: "ChannelOpenAck",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenAck",
      type: GRPCCallType.unary
    )

    public static let channelOpenConfirm = GRPCMethodDescriptor(
      name: "ChannelOpenConfirm",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenConfirm",
      type: GRPCCallType.unary
    )

    public static let channelCloseInit = GRPCMethodDescriptor(
      name: "ChannelCloseInit",
      path: "/ibc.core.channel.v1.Msg/ChannelCloseInit",
      type: GRPCCallType.unary
    )

    public static let channelCloseConfirm = GRPCMethodDescriptor(
      name: "ChannelCloseConfirm",
      path: "/ibc.core.channel.v1.Msg/ChannelCloseConfirm",
      type: GRPCCallType.unary
    )

    public static let recvPacket = GRPCMethodDescriptor(
      name: "RecvPacket",
      path: "/ibc.core.channel.v1.Msg/RecvPacket",
      type: GRPCCallType.unary
    )

    public static let timeout = GRPCMethodDescriptor(
      name: "Timeout",
      path: "/ibc.core.channel.v1.Msg/Timeout",
      type: GRPCCallType.unary
    )

    public static let timeoutOnClose = GRPCMethodDescriptor(
      name: "TimeoutOnClose",
      path: "/ibc.core.channel.v1.Msg/TimeoutOnClose",
      type: GRPCCallType.unary
    )

    public static let acknowledgement = GRPCMethodDescriptor(
      name: "Acknowledgement",
      path: "/ibc.core.channel.v1.Msg/Acknowledgement",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the ibc/channel Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Ibc_Core_Channel_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Channel_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
  func channelOpenInit(request: Ibc_Core_Channel_V1_MsgChannelOpenInit, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>

  /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
  func channelOpenTry(request: Ibc_Core_Channel_V1_MsgChannelOpenTry, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>

  /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
  func channelOpenAck(request: Ibc_Core_Channel_V1_MsgChannelOpenAck, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>

  /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
  func channelOpenConfirm(request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>

  /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
  func channelCloseInit(request: Ibc_Core_Channel_V1_MsgChannelCloseInit, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>

  /// ChannelCloseConfirm defines a rpc handler method for
  /// MsgChannelCloseConfirm.
  func channelCloseConfirm(request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>

  /// RecvPacket defines a rpc handler method for MsgRecvPacket.
  func recvPacket(request: Ibc_Core_Channel_V1_MsgRecvPacket, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgRecvPacketResponse>

  /// Timeout defines a rpc handler method for MsgTimeout.
  func timeout(request: Ibc_Core_Channel_V1_MsgTimeout, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgTimeoutResponse>

  /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
  func timeoutOnClose(request: Ibc_Core_Channel_V1_MsgTimeoutOnClose, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>

  /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
  func acknowledgement(request: Ibc_Core_Channel_V1_MsgAcknowledgement, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Channel_V1_MsgAcknowledgementResponse>
}

extension Ibc_Core_Channel_V1_MsgProvider {
  public var serviceName: Substring {
    return Ibc_Core_Channel_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChannelOpenInit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>(),
        interceptors: self.interceptors?.makeChannelOpenInitInterceptors() ?? [],
        userFunction: self.channelOpenInit(request:context:)
      )

    case "ChannelOpenTry":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenTry>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>(),
        interceptors: self.interceptors?.makeChannelOpenTryInterceptors() ?? [],
        userFunction: self.channelOpenTry(request:context:)
      )

    case "ChannelOpenAck":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenAck>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>(),
        interceptors: self.interceptors?.makeChannelOpenAckInterceptors() ?? [],
        userFunction: self.channelOpenAck(request:context:)
      )

    case "ChannelOpenConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>(),
        interceptors: self.interceptors?.makeChannelOpenConfirmInterceptors() ?? [],
        userFunction: self.channelOpenConfirm(request:context:)
      )

    case "ChannelCloseInit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelCloseInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>(),
        interceptors: self.interceptors?.makeChannelCloseInitInterceptors() ?? [],
        userFunction: self.channelCloseInit(request:context:)
      )

    case "ChannelCloseConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelCloseConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>(),
        interceptors: self.interceptors?.makeChannelCloseConfirmInterceptors() ?? [],
        userFunction: self.channelCloseConfirm(request:context:)
      )

    case "RecvPacket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgRecvPacket>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgRecvPacketResponse>(),
        interceptors: self.interceptors?.makeRecvPacketInterceptors() ?? [],
        userFunction: self.recvPacket(request:context:)
      )

    case "Timeout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgTimeout>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgTimeoutResponse>(),
        interceptors: self.interceptors?.makeTimeoutInterceptors() ?? [],
        userFunction: self.timeout(request:context:)
      )

    case "TimeoutOnClose":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgTimeoutOnClose>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>(),
        interceptors: self.interceptors?.makeTimeoutOnCloseInterceptors() ?? [],
        userFunction: self.timeoutOnClose(request:context:)
      )

    case "Acknowledgement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgAcknowledgement>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgAcknowledgementResponse>(),
        interceptors: self.interceptors?.makeAcknowledgementInterceptors() ?? [],
        userFunction: self.acknowledgement(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// Msg defines the ibc/channel Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Ibc_Core_Channel_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ibc_Core_Channel_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
  @Sendable func channelOpenInit(
    request: Ibc_Core_Channel_V1_MsgChannelOpenInit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenInitResponse

  /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
  @Sendable func channelOpenTry(
    request: Ibc_Core_Channel_V1_MsgChannelOpenTry,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenTryResponse

  /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
  @Sendable func channelOpenAck(
    request: Ibc_Core_Channel_V1_MsgChannelOpenAck,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenAckResponse

  /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
  @Sendable func channelOpenConfirm(
    request: Ibc_Core_Channel_V1_MsgChannelOpenConfirm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse

  /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
  @Sendable func channelCloseInit(
    request: Ibc_Core_Channel_V1_MsgChannelCloseInit,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelCloseInitResponse

  /// ChannelCloseConfirm defines a rpc handler method for
  /// MsgChannelCloseConfirm.
  @Sendable func channelCloseConfirm(
    request: Ibc_Core_Channel_V1_MsgChannelCloseConfirm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse

  /// RecvPacket defines a rpc handler method for MsgRecvPacket.
  @Sendable func recvPacket(
    request: Ibc_Core_Channel_V1_MsgRecvPacket,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgRecvPacketResponse

  /// Timeout defines a rpc handler method for MsgTimeout.
  @Sendable func timeout(
    request: Ibc_Core_Channel_V1_MsgTimeout,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgTimeoutResponse

  /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
  @Sendable func timeoutOnClose(
    request: Ibc_Core_Channel_V1_MsgTimeoutOnClose,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse

  /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
  @Sendable func acknowledgement(
    request: Ibc_Core_Channel_V1_MsgAcknowledgement,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ibc_Core_Channel_V1_MsgAcknowledgementResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ibc_Core_Channel_V1_MsgAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Ibc_Core_Channel_V1_MsgServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Ibc_Core_Channel_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Ibc_Core_Channel_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChannelOpenInit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>(),
        interceptors: self.interceptors?.makeChannelOpenInitInterceptors() ?? [],
        wrapping: self.channelOpenInit(request:context:)
      )

    case "ChannelOpenTry":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenTry>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>(),
        interceptors: self.interceptors?.makeChannelOpenTryInterceptors() ?? [],
        wrapping: self.channelOpenTry(request:context:)
      )

    case "ChannelOpenAck":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenAck>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>(),
        interceptors: self.interceptors?.makeChannelOpenAckInterceptors() ?? [],
        wrapping: self.channelOpenAck(request:context:)
      )

    case "ChannelOpenConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelOpenConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>(),
        interceptors: self.interceptors?.makeChannelOpenConfirmInterceptors() ?? [],
        wrapping: self.channelOpenConfirm(request:context:)
      )

    case "ChannelCloseInit":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelCloseInit>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>(),
        interceptors: self.interceptors?.makeChannelCloseInitInterceptors() ?? [],
        wrapping: self.channelCloseInit(request:context:)
      )

    case "ChannelCloseConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgChannelCloseConfirm>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>(),
        interceptors: self.interceptors?.makeChannelCloseConfirmInterceptors() ?? [],
        wrapping: self.channelCloseConfirm(request:context:)
      )

    case "RecvPacket":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgRecvPacket>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgRecvPacketResponse>(),
        interceptors: self.interceptors?.makeRecvPacketInterceptors() ?? [],
        wrapping: self.recvPacket(request:context:)
      )

    case "Timeout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgTimeout>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgTimeoutResponse>(),
        interceptors: self.interceptors?.makeTimeoutInterceptors() ?? [],
        wrapping: self.timeout(request:context:)
      )

    case "TimeoutOnClose":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgTimeoutOnClose>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>(),
        interceptors: self.interceptors?.makeTimeoutOnCloseInterceptors() ?? [],
        wrapping: self.timeoutOnClose(request:context:)
      )

    case "Acknowledgement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Channel_V1_MsgAcknowledgement>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Channel_V1_MsgAcknowledgementResponse>(),
        interceptors: self.interceptors?.makeAcknowledgementInterceptors() ?? [],
        wrapping: self.acknowledgement(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Ibc_Core_Channel_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'channelOpenInit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelOpenInitInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenInit, Ibc_Core_Channel_V1_MsgChannelOpenInitResponse>]

  /// - Returns: Interceptors to use when handling 'channelOpenTry'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelOpenTryInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenTry, Ibc_Core_Channel_V1_MsgChannelOpenTryResponse>]

  /// - Returns: Interceptors to use when handling 'channelOpenAck'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelOpenAckInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenAck, Ibc_Core_Channel_V1_MsgChannelOpenAckResponse>]

  /// - Returns: Interceptors to use when handling 'channelOpenConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelOpenConfirmInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelOpenConfirm, Ibc_Core_Channel_V1_MsgChannelOpenConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'channelCloseInit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelCloseInitInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelCloseInit, Ibc_Core_Channel_V1_MsgChannelCloseInitResponse>]

  /// - Returns: Interceptors to use when handling 'channelCloseConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChannelCloseConfirmInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgChannelCloseConfirm, Ibc_Core_Channel_V1_MsgChannelCloseConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'recvPacket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecvPacketInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgRecvPacket, Ibc_Core_Channel_V1_MsgRecvPacketResponse>]

  /// - Returns: Interceptors to use when handling 'timeout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTimeoutInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgTimeout, Ibc_Core_Channel_V1_MsgTimeoutResponse>]

  /// - Returns: Interceptors to use when handling 'timeoutOnClose'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTimeoutOnCloseInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgTimeoutOnClose, Ibc_Core_Channel_V1_MsgTimeoutOnCloseResponse>]

  /// - Returns: Interceptors to use when handling 'acknowledgement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAcknowledgementInterceptors() -> [ServerInterceptor<Ibc_Core_Channel_V1_MsgAcknowledgement, Ibc_Core_Channel_V1_MsgAcknowledgementResponse>]
}

public enum Ibc_Core_Channel_V1_MsgServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "ibc.core.channel.v1.Msg",
    methods: [
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelOpenInit,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelOpenTry,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelOpenAck,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelOpenConfirm,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelCloseInit,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.channelCloseConfirm,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.recvPacket,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.timeout,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.timeoutOnClose,
      Ibc_Core_Channel_V1_MsgServerMetadata.Methods.acknowledgement,
    ]
  )

  public enum Methods {
    public static let channelOpenInit = GRPCMethodDescriptor(
      name: "ChannelOpenInit",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenInit",
      type: GRPCCallType.unary
    )

    public static let channelOpenTry = GRPCMethodDescriptor(
      name: "ChannelOpenTry",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenTry",
      type: GRPCCallType.unary
    )

    public static let channelOpenAck = GRPCMethodDescriptor(
      name: "ChannelOpenAck",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenAck",
      type: GRPCCallType.unary
    )

    public static let channelOpenConfirm = GRPCMethodDescriptor(
      name: "ChannelOpenConfirm",
      path: "/ibc.core.channel.v1.Msg/ChannelOpenConfirm",
      type: GRPCCallType.unary
    )

    public static let channelCloseInit = GRPCMethodDescriptor(
      name: "ChannelCloseInit",
      path: "/ibc.core.channel.v1.Msg/ChannelCloseInit",
      type: GRPCCallType.unary
    )

    public static let channelCloseConfirm = GRPCMethodDescriptor(
      name: "ChannelCloseConfirm",
      path: "/ibc.core.channel.v1.Msg/ChannelCloseConfirm",
      type: GRPCCallType.unary
    )

    public static let recvPacket = GRPCMethodDescriptor(
      name: "RecvPacket",
      path: "/ibc.core.channel.v1.Msg/RecvPacket",
      type: GRPCCallType.unary
    )

    public static let timeout = GRPCMethodDescriptor(
      name: "Timeout",
      path: "/ibc.core.channel.v1.Msg/Timeout",
      type: GRPCCallType.unary
    )

    public static let timeoutOnClose = GRPCMethodDescriptor(
      name: "TimeoutOnClose",
      path: "/ibc.core.channel.v1.Msg/TimeoutOnClose",
      type: GRPCCallType.unary
    )

    public static let acknowledgement = GRPCMethodDescriptor(
      name: "Acknowledgement",
      path: "/ibc.core.channel.v1.Msg/Acknowledgement",
      type: GRPCCallType.unary
    )
  }
}
