//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: penumbra/view/v1alpha1/view.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// The view protocol is used by a view client, who wants to do some
/// transaction-related actions, to request data from a view service, which is
/// responsible for synchronizing and scanning the public chain state with one or
/// more full viewing keys.
///
/// View protocol requests include a hash of the full viewing key, used to
/// identify which set of data to query.  This also works as a pseudo-auth system
/// (assuming transport security, the client has to know the FVK to request its
/// data).  (TODO: refine this)
///
/// Usage: instantiate `Penumbra_View_V1alpha1_ViewProtocolServiceClient`, then call methods of this protocol to make API calls.
public protocol Penumbra_View_V1alpha1_ViewProtocolServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? { get }

  func status(
    _ request: Penumbra_View_V1alpha1_StatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse>

  func statusStream(
    _ request: Penumbra_View_V1alpha1_StatusStreamRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_View_V1alpha1_StatusStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse>

  func notes(
    _ request: Penumbra_View_V1alpha1_NotesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_View_V1alpha1_SpendableNoteRecord) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>

  func quarantinedNotes(
    _ request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_View_V1alpha1_QuarantinedNoteRecord) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord>

  func witness(
    _ request: Penumbra_View_V1alpha1_WitnessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData>

  func assets(
    _ request: Penumbra_View_V1alpha1_AssetRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_Core_Crypto_V1alpha1_Asset) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset>

  func chainParameters(
    _ request: Penumbra_View_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>

  func fMDParameters(
    _ request: Penumbra_View_V1alpha1_FMDParametersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters>

  func noteByCommitment(
    _ request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>

  func nullifierStatus(
    _ request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse>

  func transactionHashes(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_View_V1alpha1_TransactionHashStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse>

  func transactionByHash(
    _ request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse>

  func transactions(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions?,
    handler: @escaping (Penumbra_View_V1alpha1_TransactionStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse>

  func transactionPerspective(
    _ request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse>
}

extension Penumbra_View_V1alpha1_ViewProtocolServiceClientProtocol {
  public var serviceName: String {
    return "penumbra.view.v1alpha1.ViewProtocolService"
  }

  /// Get current status of chain sync
  ///
  /// - Parameters:
  ///   - request: Request to send to Status.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func status(
    _ request: Penumbra_View_V1alpha1_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  /// Stream sync status updates until the view service has caught up with the core.chain.v1alpha1.
  ///
  /// - Parameters:
  ///   - request: Request to send to StatusStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func statusStream(
    _ request: Penumbra_View_V1alpha1_StatusStreamRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_View_V1alpha1_StatusStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.statusStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// Queries for notes that have been accepted by the core.chain.v1alpha1.
  ///
  /// - Parameters:
  ///   - request: Request to send to Notes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func notes(
    _ request: Penumbra_View_V1alpha1_NotesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_View_V1alpha1_SpendableNoteRecord) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.notes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Queries for notes that have been quarantined until the end of an unbonding period.
  ///
  /// - Parameters:
  ///   - request: Request to send to QuarantinedNotes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func quarantinedNotes(
    _ request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_View_V1alpha1_QuarantinedNoteRecord) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.quarantinedNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuarantinedNotesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Returns authentication paths for the given note commitments.
  ///
  /// This method takes a batch of input commitments, rather than just one, so
  /// that the client can get a consistent set of authentication paths to a
  /// common root.  (Otherwise, if a client made multiple requests, the wallet
  /// service could have advanced the note commitment tree state between queries).
  ///
  /// - Parameters:
  ///   - request: Request to send to Witness.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func witness(
    _ request: Penumbra_View_V1alpha1_WitnessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.witness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWitnessInterceptors() ?? []
    )
  }

  /// Queries for assets.
  ///
  /// - Parameters:
  ///   - request: Request to send to Assets.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func assets(
    _ request: Penumbra_View_V1alpha1_AssetRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_Core_Crypto_V1alpha1_Asset) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Query for the current chain parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChainParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func chainParameters(
    _ request: Penumbra_View_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  /// Query for the current FMD parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to FMDParameters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fMDParameters(
    _ request: Penumbra_View_V1alpha1_FMDParametersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.fMDParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFMDParametersInterceptors() ?? []
    )
  }

  /// Query for a note by its note commitment, optionally waiting until the note is detected.
  ///
  /// - Parameters:
  ///   - request: Request to send to NoteByCommitment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func noteByCommitment(
    _ request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.noteByCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNoteByCommitmentInterceptors() ?? []
    )
  }

  /// Query for whether a nullifier has been spent, optionally waiting until it is spent.
  ///
  /// - Parameters:
  ///   - request: Request to send to NullifierStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func nullifierStatus(
    _ request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.nullifierStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNullifierStatusInterceptors() ?? []
    )
  }

  /// Query for the transaction hashes in the given range of blocks.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransactionHashes.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func transactionHashes(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_View_V1alpha1_TransactionHashStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionHashesInterceptors() ?? [],
      handler: handler
    )
  }

  /// Query for a given transaction hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransactionByHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transactionByHash(
    _ request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionByHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByHashInterceptors() ?? []
    )
  }

  /// Query for the full transactions in the given range of blocks.
  ///
  /// - Parameters:
  ///   - request: Request to send to Transactions.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func transactions(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Penumbra_View_V1alpha1_TransactionStreamResponse) -> Void
  ) -> ServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse> {
    return self.makeServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Query for the transaction perspective of the given transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to TransactionPerspective.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func transactionPerspective(
    _ request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse> {
    return self.makeUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionPerspective.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionPerspectiveInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Penumbra_View_V1alpha1_ViewProtocolServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Penumbra_View_V1alpha1_ViewProtocolServiceNIOClient")
public final class Penumbra_View_V1alpha1_ViewProtocolServiceClient: Penumbra_View_V1alpha1_ViewProtocolServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the penumbra.view.v1alpha1.ViewProtocolService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Penumbra_View_V1alpha1_ViewProtocolServiceNIOClient: Penumbra_View_V1alpha1_ViewProtocolServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the penumbra.view.v1alpha1.ViewProtocolService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The view protocol is used by a view client, who wants to do some
/// transaction-related actions, to request data from a view service, which is
/// responsible for synchronizing and scanning the public chain state with one or
/// more full viewing keys.
///
/// View protocol requests include a hash of the full viewing key, used to
/// identify which set of data to query.  This also works as a pseudo-auth system
/// (assuming transport security, the client has to know the FVK to request its
/// data).  (TODO: refine this)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_View_V1alpha1_ViewProtocolServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? { get }

  func makeStatusCall(
    _ request: Penumbra_View_V1alpha1_StatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse>

  func makeStatusStreamCall(
    _ request: Penumbra_View_V1alpha1_StatusStreamRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse>

  func makeNotesCall(
    _ request: Penumbra_View_V1alpha1_NotesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>

  func makeQuarantinedNotesCall(
    _ request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord>

  func makeWitnessCall(
    _ request: Penumbra_View_V1alpha1_WitnessRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData>

  func makeAssetsCall(
    _ request: Penumbra_View_V1alpha1_AssetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset>

  func makeChainParametersCall(
    _ request: Penumbra_View_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>

  func makeFmdparametersCall(
    _ request: Penumbra_View_V1alpha1_FMDParametersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters>

  func makeNoteByCommitmentCall(
    _ request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>

  func makeNullifierStatusCall(
    _ request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse>

  func makeTransactionHashesCall(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse>

  func makeTransactionByHashCall(
    _ request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse>

  func makeTransactionsCall(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse>

  func makeTransactionPerspectiveCall(
    _ request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_View_V1alpha1_ViewProtocolServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeStatusCall(
    _ request: Penumbra_View_V1alpha1_StatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  public func makeStatusStreamCall(
    _ request: Penumbra_View_V1alpha1_StatusStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.statusStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusStreamInterceptors() ?? []
    )
  }

  public func makeNotesCall(
    _ request: Penumbra_View_V1alpha1_NotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.notes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotesInterceptors() ?? []
    )
  }

  public func makeQuarantinedNotesCall(
    _ request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.quarantinedNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuarantinedNotesInterceptors() ?? []
    )
  }

  public func makeWitnessCall(
    _ request: Penumbra_View_V1alpha1_WitnessRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.witness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWitnessInterceptors() ?? []
    )
  }

  public func makeAssetsCall(
    _ request: Penumbra_View_V1alpha1_AssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? []
    )
  }

  public func makeChainParametersCall(
    _ request: Penumbra_View_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  public func makeFmdparametersCall(
    _ request: Penumbra_View_V1alpha1_FMDParametersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.fMDParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFMDParametersInterceptors() ?? []
    )
  }

  public func makeNoteByCommitmentCall(
    _ request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.noteByCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNoteByCommitmentInterceptors() ?? []
    )
  }

  public func makeNullifierStatusCall(
    _ request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.nullifierStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNullifierStatusInterceptors() ?? []
    )
  }

  public func makeTransactionHashesCall(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionHashesInterceptors() ?? []
    )
  }

  public func makeTransactionByHashCall(
    _ request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionByHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByHashInterceptors() ?? []
    )
  }

  public func makeTransactionsCall(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionsInterceptors() ?? []
    )
  }

  public func makeTransactionPerspectiveCall(
    _ request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionPerspective.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionPerspectiveInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_View_V1alpha1_ViewProtocolServiceAsyncClientProtocol {
  public func status(
    _ request: Penumbra_View_V1alpha1_StatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_View_V1alpha1_StatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.status.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusInterceptors() ?? []
    )
  }

  public func statusStream(
    _ request: Penumbra_View_V1alpha1_StatusStreamRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_View_V1alpha1_StatusStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.statusStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStatusStreamInterceptors() ?? []
    )
  }

  public func notes(
    _ request: Penumbra_View_V1alpha1_NotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_View_V1alpha1_SpendableNoteRecord> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.notes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNotesInterceptors() ?? []
    )
  }

  public func quarantinedNotes(
    _ request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_View_V1alpha1_QuarantinedNoteRecord> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.quarantinedNotes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuarantinedNotesInterceptors() ?? []
    )
  }

  public func witness(
    _ request: Penumbra_View_V1alpha1_WitnessRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Transaction_V1alpha1_WitnessData {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.witness.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWitnessInterceptors() ?? []
    )
  }

  public func assets(
    _ request: Penumbra_View_V1alpha1_AssetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_Core_Crypto_V1alpha1_Asset> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.assets.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetsInterceptors() ?? []
    )
  }

  public func chainParameters(
    _ request: Penumbra_View_V1alpha1_ChainParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Chain_V1alpha1_ChainParameters {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.chainParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChainParametersInterceptors() ?? []
    )
  }

  public func fMDParameters(
    _ request: Penumbra_View_V1alpha1_FMDParametersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Chain_V1alpha1_FmdParameters {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.fMDParameters.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFMDParametersInterceptors() ?? []
    )
  }

  public func noteByCommitment(
    _ request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_View_V1alpha1_SpendableNoteRecord {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.noteByCommitment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNoteByCommitmentInterceptors() ?? []
    )
  }

  public func nullifierStatus(
    _ request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_View_V1alpha1_NullifierStatusResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.nullifierStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNullifierStatusInterceptors() ?? []
    )
  }

  public func transactionHashes(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_View_V1alpha1_TransactionHashStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionHashes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionHashesInterceptors() ?? []
    )
  }

  public func transactionByHash(
    _ request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_View_V1alpha1_TransactionByHashResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionByHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionByHashInterceptors() ?? []
    )
  }

  public func transactions(
    _ request: Penumbra_View_V1alpha1_TransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Penumbra_View_V1alpha1_TransactionStreamResponse> {
    return self.performAsyncServerStreamingCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactions.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionsInterceptors() ?? []
    )
  }

  public func transactionPerspective(
    _ request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_View_V1alpha1_TransactionPerspectiveResponse {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionPerspective.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransactionPerspectiveInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Penumbra_View_V1alpha1_ViewProtocolServiceAsyncClient: Penumbra_View_V1alpha1_ViewProtocolServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_View_V1alpha1_ViewProtocolServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'status'.
  func makeStatusInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse>]

  /// - Returns: Interceptors to use when invoking 'statusStream'.
  func makeStatusStreamInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'notes'.
  func makeNotesInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>]

  /// - Returns: Interceptors to use when invoking 'quarantinedNotes'.
  func makeQuarantinedNotesInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord>]

  /// - Returns: Interceptors to use when invoking 'witness'.
  func makeWitnessInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData>]

  /// - Returns: Interceptors to use when invoking 'assets'.
  func makeAssetsInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset>]

  /// - Returns: Interceptors to use when invoking 'chainParameters'.
  func makeChainParametersInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>]

  /// - Returns: Interceptors to use when invoking 'fMDParameters'.
  func makeFMDParametersInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters>]

  /// - Returns: Interceptors to use when invoking 'noteByCommitment'.
  func makeNoteByCommitmentInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>]

  /// - Returns: Interceptors to use when invoking 'nullifierStatus'.
  func makeNullifierStatusInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'transactionHashes'.
  func makeTransactionHashesInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'transactionByHash'.
  func makeTransactionByHashInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse>]

  /// - Returns: Interceptors to use when invoking 'transactions'.
  func makeTransactionsInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse>]

  /// - Returns: Interceptors to use when invoking 'transactionPerspective'.
  func makeTransactionPerspectiveInterceptors() -> [ClientInterceptor<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse>]
}

public enum Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ViewProtocolService",
    fullName: "penumbra.view.v1alpha1.ViewProtocolService",
    methods: [
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.status,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.statusStream,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.notes,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.quarantinedNotes,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.witness,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.assets,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.chainParameters,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.fMDParameters,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.noteByCommitment,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.nullifierStatus,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionHashes,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionByHash,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactions,
      Penumbra_View_V1alpha1_ViewProtocolServiceClientMetadata.Methods.transactionPerspective,
    ]
  )

  public enum Methods {
    public static let status = GRPCMethodDescriptor(
      name: "Status",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Status",
      type: GRPCCallType.unary
    )

    public static let statusStream = GRPCMethodDescriptor(
      name: "StatusStream",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/StatusStream",
      type: GRPCCallType.serverStreaming
    )

    public static let notes = GRPCMethodDescriptor(
      name: "Notes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Notes",
      type: GRPCCallType.serverStreaming
    )

    public static let quarantinedNotes = GRPCMethodDescriptor(
      name: "QuarantinedNotes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/QuarantinedNotes",
      type: GRPCCallType.serverStreaming
    )

    public static let witness = GRPCMethodDescriptor(
      name: "Witness",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Witness",
      type: GRPCCallType.unary
    )

    public static let assets = GRPCMethodDescriptor(
      name: "Assets",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Assets",
      type: GRPCCallType.serverStreaming
    )

    public static let chainParameters = GRPCMethodDescriptor(
      name: "ChainParameters",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/ChainParameters",
      type: GRPCCallType.unary
    )

    public static let fMDParameters = GRPCMethodDescriptor(
      name: "FMDParameters",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/FMDParameters",
      type: GRPCCallType.unary
    )

    public static let noteByCommitment = GRPCMethodDescriptor(
      name: "NoteByCommitment",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/NoteByCommitment",
      type: GRPCCallType.unary
    )

    public static let nullifierStatus = GRPCMethodDescriptor(
      name: "NullifierStatus",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/NullifierStatus",
      type: GRPCCallType.unary
    )

    public static let transactionHashes = GRPCMethodDescriptor(
      name: "TransactionHashes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionHashes",
      type: GRPCCallType.serverStreaming
    )

    public static let transactionByHash = GRPCMethodDescriptor(
      name: "TransactionByHash",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionByHash",
      type: GRPCCallType.unary
    )

    public static let transactions = GRPCMethodDescriptor(
      name: "Transactions",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Transactions",
      type: GRPCCallType.serverStreaming
    )

    public static let transactionPerspective = GRPCMethodDescriptor(
      name: "TransactionPerspective",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionPerspective",
      type: GRPCCallType.unary
    )
  }
}

/// The view protocol is used by a view client, who wants to do some
/// transaction-related actions, to request data from a view service, which is
/// responsible for synchronizing and scanning the public chain state with one or
/// more full viewing keys.
///
/// View protocol requests include a hash of the full viewing key, used to
/// identify which set of data to query.  This also works as a pseudo-auth system
/// (assuming transport security, the client has to know the FVK to request its
/// data).  (TODO: refine this)
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Penumbra_View_V1alpha1_ViewProtocolServiceProvider: CallHandlerProvider {
  var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceServerInterceptorFactoryProtocol? { get }

  /// Get current status of chain sync
  func status(request: Penumbra_View_V1alpha1_StatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_View_V1alpha1_StatusResponse>

  /// Stream sync status updates until the view service has caught up with the core.chain.v1alpha1.
  func statusStream(request: Penumbra_View_V1alpha1_StatusStreamRequest, context: StreamingResponseCallContext<Penumbra_View_V1alpha1_StatusStreamResponse>) -> EventLoopFuture<GRPCStatus>

  /// Queries for notes that have been accepted by the core.chain.v1alpha1.
  func notes(request: Penumbra_View_V1alpha1_NotesRequest, context: StreamingResponseCallContext<Penumbra_View_V1alpha1_SpendableNoteRecord>) -> EventLoopFuture<GRPCStatus>

  /// Queries for notes that have been quarantined until the end of an unbonding period.
  func quarantinedNotes(request: Penumbra_View_V1alpha1_QuarantinedNotesRequest, context: StreamingResponseCallContext<Penumbra_View_V1alpha1_QuarantinedNoteRecord>) -> EventLoopFuture<GRPCStatus>

  /// Returns authentication paths for the given note commitments.
  ///
  /// This method takes a batch of input commitments, rather than just one, so
  /// that the client can get a consistent set of authentication paths to a
  /// common root.  (Otherwise, if a client made multiple requests, the wallet
  /// service could have advanced the note commitment tree state between queries).
  func witness(request: Penumbra_View_V1alpha1_WitnessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Transaction_V1alpha1_WitnessData>

  /// Queries for assets.
  func assets(request: Penumbra_View_V1alpha1_AssetRequest, context: StreamingResponseCallContext<Penumbra_Core_Crypto_V1alpha1_Asset>) -> EventLoopFuture<GRPCStatus>

  /// Query for the current chain parameters.
  func chainParameters(request: Penumbra_View_V1alpha1_ChainParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Chain_V1alpha1_ChainParameters>

  /// Query for the current FMD parameters.
  func fMDParameters(request: Penumbra_View_V1alpha1_FMDParametersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Chain_V1alpha1_FmdParameters>

  /// Query for a note by its note commitment, optionally waiting until the note is detected.
  func noteByCommitment(request: Penumbra_View_V1alpha1_NoteByCommitmentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_View_V1alpha1_SpendableNoteRecord>

  /// Query for whether a nullifier has been spent, optionally waiting until it is spent.
  func nullifierStatus(request: Penumbra_View_V1alpha1_NullifierStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_View_V1alpha1_NullifierStatusResponse>

  /// Query for the transaction hashes in the given range of blocks.
  func transactionHashes(request: Penumbra_View_V1alpha1_TransactionsRequest, context: StreamingResponseCallContext<Penumbra_View_V1alpha1_TransactionHashStreamResponse>) -> EventLoopFuture<GRPCStatus>

  /// Query for a given transaction hash.
  func transactionByHash(request: Penumbra_View_V1alpha1_TransactionByHashRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_View_V1alpha1_TransactionByHashResponse>

  /// Query for the full transactions in the given range of blocks.
  func transactions(request: Penumbra_View_V1alpha1_TransactionsRequest, context: StreamingResponseCallContext<Penumbra_View_V1alpha1_TransactionStreamResponse>) -> EventLoopFuture<GRPCStatus>

  /// Query for the transaction perspective of the given transaction
  func transactionPerspective(request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_View_V1alpha1_TransactionPerspectiveResponse>
}

extension Penumbra_View_V1alpha1_ViewProtocolServiceProvider {
  public var serviceName: Substring {
    return Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Status":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_StatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        userFunction: self.status(request:context:)
      )

    case "StatusStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_StatusStreamRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_StatusStreamResponse>(),
        interceptors: self.interceptors?.makeStatusStreamInterceptors() ?? [],
        userFunction: self.statusStream(request:context:)
      )

    case "Notes":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NotesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_SpendableNoteRecord>(),
        interceptors: self.interceptors?.makeNotesInterceptors() ?? [],
        userFunction: self.notes(request:context:)
      )

    case "QuarantinedNotes":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_QuarantinedNotesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_QuarantinedNoteRecord>(),
        interceptors: self.interceptors?.makeQuarantinedNotesInterceptors() ?? [],
        userFunction: self.quarantinedNotes(request:context:)
      )

    case "Witness":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_WitnessRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Transaction_V1alpha1_WitnessData>(),
        interceptors: self.interceptors?.makeWitnessInterceptors() ?? [],
        userFunction: self.witness(request:context:)
      )

    case "Assets":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_AssetRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Crypto_V1alpha1_Asset>(),
        interceptors: self.interceptors?.makeAssetsInterceptors() ?? [],
        userFunction: self.assets(request:context:)
      )

    case "ChainParameters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_ChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_ChainParameters>(),
        interceptors: self.interceptors?.makeChainParametersInterceptors() ?? [],
        userFunction: self.chainParameters(request:context:)
      )

    case "FMDParameters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_FMDParametersRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_FmdParameters>(),
        interceptors: self.interceptors?.makeFMDParametersInterceptors() ?? [],
        userFunction: self.fMDParameters(request:context:)
      )

    case "NoteByCommitment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NoteByCommitmentRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_SpendableNoteRecord>(),
        interceptors: self.interceptors?.makeNoteByCommitmentInterceptors() ?? [],
        userFunction: self.noteByCommitment(request:context:)
      )

    case "NullifierStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NullifierStatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_NullifierStatusResponse>(),
        interceptors: self.interceptors?.makeNullifierStatusInterceptors() ?? [],
        userFunction: self.nullifierStatus(request:context:)
      )

    case "TransactionHashes":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionHashStreamResponse>(),
        interceptors: self.interceptors?.makeTransactionHashesInterceptors() ?? [],
        userFunction: self.transactionHashes(request:context:)
      )

    case "TransactionByHash":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionByHashRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionByHashResponse>(),
        interceptors: self.interceptors?.makeTransactionByHashInterceptors() ?? [],
        userFunction: self.transactionByHash(request:context:)
      )

    case "Transactions":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionStreamResponse>(),
        interceptors: self.interceptors?.makeTransactionsInterceptors() ?? [],
        userFunction: self.transactions(request:context:)
      )

    case "TransactionPerspective":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionPerspectiveRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionPerspectiveResponse>(),
        interceptors: self.interceptors?.makeTransactionPerspectiveInterceptors() ?? [],
        userFunction: self.transactionPerspective(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The view protocol is used by a view client, who wants to do some
/// transaction-related actions, to request data from a view service, which is
/// responsible for synchronizing and scanning the public chain state with one or
/// more full viewing keys.
///
/// View protocol requests include a hash of the full viewing key, used to
/// identify which set of data to query.  This also works as a pseudo-auth system
/// (assuming transport security, the client has to know the FVK to request its
/// data).  (TODO: refine this)
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_View_V1alpha1_ViewProtocolServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceServerInterceptorFactoryProtocol? { get }

  /// Get current status of chain sync
  @Sendable func status(
    request: Penumbra_View_V1alpha1_StatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_View_V1alpha1_StatusResponse

  /// Stream sync status updates until the view service has caught up with the core.chain.v1alpha1.
  @Sendable func statusStream(
    request: Penumbra_View_V1alpha1_StatusStreamRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_View_V1alpha1_StatusStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Queries for notes that have been accepted by the core.chain.v1alpha1.
  @Sendable func notes(
    request: Penumbra_View_V1alpha1_NotesRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_View_V1alpha1_SpendableNoteRecord>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Queries for notes that have been quarantined until the end of an unbonding period.
  @Sendable func quarantinedNotes(
    request: Penumbra_View_V1alpha1_QuarantinedNotesRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_View_V1alpha1_QuarantinedNoteRecord>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Returns authentication paths for the given note commitments.
  ///
  /// This method takes a batch of input commitments, rather than just one, so
  /// that the client can get a consistent set of authentication paths to a
  /// common root.  (Otherwise, if a client made multiple requests, the wallet
  /// service could have advanced the note commitment tree state between queries).
  @Sendable func witness(
    request: Penumbra_View_V1alpha1_WitnessRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Transaction_V1alpha1_WitnessData

  /// Queries for assets.
  @Sendable func assets(
    request: Penumbra_View_V1alpha1_AssetRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_Core_Crypto_V1alpha1_Asset>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Query for the current chain parameters.
  @Sendable func chainParameters(
    request: Penumbra_View_V1alpha1_ChainParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Chain_V1alpha1_ChainParameters

  /// Query for the current FMD parameters.
  @Sendable func fMDParameters(
    request: Penumbra_View_V1alpha1_FMDParametersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Chain_V1alpha1_FmdParameters

  /// Query for a note by its note commitment, optionally waiting until the note is detected.
  @Sendable func noteByCommitment(
    request: Penumbra_View_V1alpha1_NoteByCommitmentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_View_V1alpha1_SpendableNoteRecord

  /// Query for whether a nullifier has been spent, optionally waiting until it is spent.
  @Sendable func nullifierStatus(
    request: Penumbra_View_V1alpha1_NullifierStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_View_V1alpha1_NullifierStatusResponse

  /// Query for the transaction hashes in the given range of blocks.
  @Sendable func transactionHashes(
    request: Penumbra_View_V1alpha1_TransactionsRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_View_V1alpha1_TransactionHashStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Query for a given transaction hash.
  @Sendable func transactionByHash(
    request: Penumbra_View_V1alpha1_TransactionByHashRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_View_V1alpha1_TransactionByHashResponse

  /// Query for the full transactions in the given range of blocks.
  @Sendable func transactions(
    request: Penumbra_View_V1alpha1_TransactionsRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Penumbra_View_V1alpha1_TransactionStreamResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Query for the transaction perspective of the given transaction
  @Sendable func transactionPerspective(
    request: Penumbra_View_V1alpha1_TransactionPerspectiveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_View_V1alpha1_TransactionPerspectiveResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_View_V1alpha1_ViewProtocolServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Penumbra_View_V1alpha1_ViewProtocolServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Status":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_StatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_StatusResponse>(),
        interceptors: self.interceptors?.makeStatusInterceptors() ?? [],
        wrapping: self.status(request:context:)
      )

    case "StatusStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_StatusStreamRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_StatusStreamResponse>(),
        interceptors: self.interceptors?.makeStatusStreamInterceptors() ?? [],
        wrapping: self.statusStream(request:responseStream:context:)
      )

    case "Notes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NotesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_SpendableNoteRecord>(),
        interceptors: self.interceptors?.makeNotesInterceptors() ?? [],
        wrapping: self.notes(request:responseStream:context:)
      )

    case "QuarantinedNotes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_QuarantinedNotesRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_QuarantinedNoteRecord>(),
        interceptors: self.interceptors?.makeQuarantinedNotesInterceptors() ?? [],
        wrapping: self.quarantinedNotes(request:responseStream:context:)
      )

    case "Witness":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_WitnessRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Transaction_V1alpha1_WitnessData>(),
        interceptors: self.interceptors?.makeWitnessInterceptors() ?? [],
        wrapping: self.witness(request:context:)
      )

    case "Assets":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_AssetRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Crypto_V1alpha1_Asset>(),
        interceptors: self.interceptors?.makeAssetsInterceptors() ?? [],
        wrapping: self.assets(request:responseStream:context:)
      )

    case "ChainParameters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_ChainParamsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_ChainParameters>(),
        interceptors: self.interceptors?.makeChainParametersInterceptors() ?? [],
        wrapping: self.chainParameters(request:context:)
      )

    case "FMDParameters":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_FMDParametersRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Chain_V1alpha1_FmdParameters>(),
        interceptors: self.interceptors?.makeFMDParametersInterceptors() ?? [],
        wrapping: self.fMDParameters(request:context:)
      )

    case "NoteByCommitment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NoteByCommitmentRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_SpendableNoteRecord>(),
        interceptors: self.interceptors?.makeNoteByCommitmentInterceptors() ?? [],
        wrapping: self.noteByCommitment(request:context:)
      )

    case "NullifierStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_NullifierStatusRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_NullifierStatusResponse>(),
        interceptors: self.interceptors?.makeNullifierStatusInterceptors() ?? [],
        wrapping: self.nullifierStatus(request:context:)
      )

    case "TransactionHashes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionHashStreamResponse>(),
        interceptors: self.interceptors?.makeTransactionHashesInterceptors() ?? [],
        wrapping: self.transactionHashes(request:responseStream:context:)
      )

    case "TransactionByHash":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionByHashRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionByHashResponse>(),
        interceptors: self.interceptors?.makeTransactionByHashInterceptors() ?? [],
        wrapping: self.transactionByHash(request:context:)
      )

    case "Transactions":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionsRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionStreamResponse>(),
        interceptors: self.interceptors?.makeTransactionsInterceptors() ?? [],
        wrapping: self.transactions(request:responseStream:context:)
      )

    case "TransactionPerspective":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_View_V1alpha1_TransactionPerspectiveRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_View_V1alpha1_TransactionPerspectiveResponse>(),
        interceptors: self.interceptors?.makeTransactionPerspectiveInterceptors() ?? [],
        wrapping: self.transactionPerspective(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_View_V1alpha1_ViewProtocolServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'status'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_StatusRequest, Penumbra_View_V1alpha1_StatusResponse>]

  /// - Returns: Interceptors to use when handling 'statusStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStatusStreamInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_StatusStreamRequest, Penumbra_View_V1alpha1_StatusStreamResponse>]

  /// - Returns: Interceptors to use when handling 'notes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNotesInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_NotesRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>]

  /// - Returns: Interceptors to use when handling 'quarantinedNotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuarantinedNotesInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_QuarantinedNotesRequest, Penumbra_View_V1alpha1_QuarantinedNoteRecord>]

  /// - Returns: Interceptors to use when handling 'witness'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWitnessInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_WitnessRequest, Penumbra_Core_Transaction_V1alpha1_WitnessData>]

  /// - Returns: Interceptors to use when handling 'assets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetsInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_AssetRequest, Penumbra_Core_Crypto_V1alpha1_Asset>]

  /// - Returns: Interceptors to use when handling 'chainParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChainParametersInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_ChainParamsRequest, Penumbra_Core_Chain_V1alpha1_ChainParameters>]

  /// - Returns: Interceptors to use when handling 'fMDParameters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFMDParametersInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_FMDParametersRequest, Penumbra_Core_Chain_V1alpha1_FmdParameters>]

  /// - Returns: Interceptors to use when handling 'noteByCommitment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNoteByCommitmentInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_NoteByCommitmentRequest, Penumbra_View_V1alpha1_SpendableNoteRecord>]

  /// - Returns: Interceptors to use when handling 'nullifierStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNullifierStatusInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_NullifierStatusRequest, Penumbra_View_V1alpha1_NullifierStatusResponse>]

  /// - Returns: Interceptors to use when handling 'transactionHashes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionHashesInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionHashStreamResponse>]

  /// - Returns: Interceptors to use when handling 'transactionByHash'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionByHashInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_TransactionByHashRequest, Penumbra_View_V1alpha1_TransactionByHashResponse>]

  /// - Returns: Interceptors to use when handling 'transactions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionsInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_TransactionsRequest, Penumbra_View_V1alpha1_TransactionStreamResponse>]

  /// - Returns: Interceptors to use when handling 'transactionPerspective'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransactionPerspectiveInterceptors() -> [ServerInterceptor<Penumbra_View_V1alpha1_TransactionPerspectiveRequest, Penumbra_View_V1alpha1_TransactionPerspectiveResponse>]
}

public enum Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ViewProtocolService",
    fullName: "penumbra.view.v1alpha1.ViewProtocolService",
    methods: [
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.status,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.statusStream,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.notes,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.quarantinedNotes,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.witness,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.assets,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.chainParameters,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.fMDParameters,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.noteByCommitment,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.nullifierStatus,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.transactionHashes,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.transactionByHash,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.transactions,
      Penumbra_View_V1alpha1_ViewProtocolServiceServerMetadata.Methods.transactionPerspective,
    ]
  )

  public enum Methods {
    public static let status = GRPCMethodDescriptor(
      name: "Status",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Status",
      type: GRPCCallType.unary
    )

    public static let statusStream = GRPCMethodDescriptor(
      name: "StatusStream",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/StatusStream",
      type: GRPCCallType.serverStreaming
    )

    public static let notes = GRPCMethodDescriptor(
      name: "Notes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Notes",
      type: GRPCCallType.serverStreaming
    )

    public static let quarantinedNotes = GRPCMethodDescriptor(
      name: "QuarantinedNotes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/QuarantinedNotes",
      type: GRPCCallType.serverStreaming
    )

    public static let witness = GRPCMethodDescriptor(
      name: "Witness",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Witness",
      type: GRPCCallType.unary
    )

    public static let assets = GRPCMethodDescriptor(
      name: "Assets",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Assets",
      type: GRPCCallType.serverStreaming
    )

    public static let chainParameters = GRPCMethodDescriptor(
      name: "ChainParameters",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/ChainParameters",
      type: GRPCCallType.unary
    )

    public static let fMDParameters = GRPCMethodDescriptor(
      name: "FMDParameters",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/FMDParameters",
      type: GRPCCallType.unary
    )

    public static let noteByCommitment = GRPCMethodDescriptor(
      name: "NoteByCommitment",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/NoteByCommitment",
      type: GRPCCallType.unary
    )

    public static let nullifierStatus = GRPCMethodDescriptor(
      name: "NullifierStatus",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/NullifierStatus",
      type: GRPCCallType.unary
    )

    public static let transactionHashes = GRPCMethodDescriptor(
      name: "TransactionHashes",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionHashes",
      type: GRPCCallType.serverStreaming
    )

    public static let transactionByHash = GRPCMethodDescriptor(
      name: "TransactionByHash",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionByHash",
      type: GRPCCallType.unary
    )

    public static let transactions = GRPCMethodDescriptor(
      name: "Transactions",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/Transactions",
      type: GRPCCallType.serverStreaming
    )

    public static let transactionPerspective = GRPCMethodDescriptor(
      name: "TransactionPerspective",
      path: "/penumbra.view.v1alpha1.ViewProtocolService/TransactionPerspective",
      type: GRPCCallType.unary
    )
  }
}
