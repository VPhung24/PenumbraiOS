//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: penumbra/custody/v1alpha1/custody.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// The custody protocol is used by a wallet client to request authorization for
/// a transaction they've constructed.
/// 
/// Modeling transaction authorization as an asynchronous RPC call encourages
/// software to be written in a way that has a compatible data flow with a "soft
/// HSM", threshold signing, a hardware wallet, etc.
/// 
/// The custody protocol does not trust the client to authorize spends, so
/// custody requests must contain sufficient information for the custodian to
/// understand the transaction and determine whether or not it should be
/// authorized.
///
/// Usage: instantiate `Penumbra_Custody_V1alpha1_CustodyProtocolServiceClient`, then call methods of this protocol to make API calls.
public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? { get }

  func authorize(
    _ request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData>
}

extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientProtocol {
  public var serviceName: String {
    return "penumbra.custody.v1alpha1.CustodyProtocolService"
  }

  /// Requests authorization of the transaction with the given description.
  ///
  /// - Parameters:
  ///   - request: Request to send to Authorize.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authorize(
    _ request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData> {
    return self.makeUnaryCall(
      path: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata.Methods.authorize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Penumbra_Custody_V1alpha1_CustodyProtocolServiceNIOClient")
public final class Penumbra_Custody_V1alpha1_CustodyProtocolServiceClient: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the penumbra.custody.v1alpha1.CustodyProtocolService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Penumbra_Custody_V1alpha1_CustodyProtocolServiceNIOClient: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the penumbra.custody.v1alpha1.CustodyProtocolService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The custody protocol is used by a wallet client to request authorization for
/// a transaction they've constructed.
/// 
/// Modeling transaction authorization as an asynchronous RPC call encourages
/// software to be written in a way that has a compatible data flow with a "soft
/// HSM", threshold signing, a hardware wallet, etc.
/// 
/// The custody protocol does not trust the client to authorize spends, so
/// custody requests must contain sufficient information for the custodian to
/// understand the transaction and determine whether or not it should be
/// authorized.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? { get }

  func makeAuthorizeCall(
    _ request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAuthorizeCall(
    _ request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData> {
    return self.makeAsyncUnaryCall(
      path: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata.Methods.authorize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncClientProtocol {
  public func authorize(
    _ request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Penumbra_Core_Transaction_V1alpha1_AuthorizationData {
    return try await self.performAsyncUnaryCall(
      path: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata.Methods.authorize.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAuthorizeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncClient: Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'authorize'.
  func makeAuthorizeInterceptors() -> [ClientInterceptor<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData>]
}

public enum Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CustodyProtocolService",
    fullName: "penumbra.custody.v1alpha1.CustodyProtocolService",
    methods: [
      Penumbra_Custody_V1alpha1_CustodyProtocolServiceClientMetadata.Methods.authorize,
    ]
  )

  public enum Methods {
    public static let authorize = GRPCMethodDescriptor(
      name: "Authorize",
      path: "/penumbra.custody.v1alpha1.CustodyProtocolService/Authorize",
      type: GRPCCallType.unary
    )
  }
}

/// The custody protocol is used by a wallet client to request authorization for
/// a transaction they've constructed.
/// 
/// Modeling transaction authorization as an asynchronous RPC call encourages
/// software to be written in a way that has a compatible data flow with a "soft
/// HSM", threshold signing, a hardware wallet, etc.
/// 
/// The custody protocol does not trust the client to authorize spends, so
/// custody requests must contain sufficient information for the custodian to
/// understand the transaction and determine whether or not it should be
/// authorized.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceProvider: CallHandlerProvider {
  var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerInterceptorFactoryProtocol? { get }

  /// Requests authorization of the transaction with the given description.
  func authorize(request: Penumbra_Custody_V1alpha1_AuthorizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Penumbra_Core_Transaction_V1alpha1_AuthorizationData>
}

extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceProvider {
  public var serviceName: Substring {
    return Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Authorize":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Custody_V1alpha1_AuthorizeRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Transaction_V1alpha1_AuthorizationData>(),
        interceptors: self.interceptors?.makeAuthorizeInterceptors() ?? [],
        userFunction: self.authorize(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The custody protocol is used by a wallet client to request authorization for
/// a transaction they've constructed.
/// 
/// Modeling transaction authorization as an asynchronous RPC call encourages
/// software to be written in a way that has a compatible data flow with a "soft
/// HSM", threshold signing, a hardware wallet, etc.
/// 
/// The custody protocol does not trust the client to authorize spends, so
/// custody requests must contain sufficient information for the custodian to
/// understand the transaction and determine whether or not it should be
/// authorized.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerInterceptorFactoryProtocol? { get }

  /// Requests authorization of the transaction with the given description.
  @Sendable func authorize(
    request: Penumbra_Custody_V1alpha1_AuthorizeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Penumbra_Core_Transaction_V1alpha1_AuthorizationData
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Penumbra_Custody_V1alpha1_CustodyProtocolServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Authorize":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Penumbra_Custody_V1alpha1_AuthorizeRequest>(),
        responseSerializer: ProtobufSerializer<Penumbra_Core_Transaction_V1alpha1_AuthorizationData>(),
        interceptors: self.interceptors?.makeAuthorizeInterceptors() ?? [],
        wrapping: self.authorize(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'authorize'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAuthorizeInterceptors() -> [ServerInterceptor<Penumbra_Custody_V1alpha1_AuthorizeRequest, Penumbra_Core_Transaction_V1alpha1_AuthorizationData>]
}

public enum Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CustodyProtocolService",
    fullName: "penumbra.custody.v1alpha1.CustodyProtocolService",
    methods: [
      Penumbra_Custody_V1alpha1_CustodyProtocolServiceServerMetadata.Methods.authorize,
    ]
  )

  public enum Methods {
    public static let authorize = GRPCMethodDescriptor(
      name: "Authorize",
      path: "/penumbra.custody.v1alpha1.CustodyProtocolService/Authorize",
      type: GRPCCallType.unary
    )
  }
}
